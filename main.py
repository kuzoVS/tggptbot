import asyncio
import logging
import re
import base64
import aiohttp
import os
import sys
from datetime import datetime
from typing import Any, Awaitable, Callable, Dict

from aiogram import Bot, Dispatcher, types, F, BaseMiddleware
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from openai import OpenAI, AsyncOpenAI
import g4f
from g4f.client import Client
from deep_translator import GoogleTranslator

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import BotConfig
from database import DatabaseManager, DatabaseConfig

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db_manager = None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

bot = Bot(token=BotConfig.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ö–ª–∏–µ–Ω—Ç OpenAI –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ OpenRouter
text_client = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=BotConfig.OPENAPI,
)

# –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫
img_client = Client()
MAX_HISTORY = 10

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
TIMEOUT = 30
PROCESSING_INTERVAL = 2

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
ADMIN_IDS = {
    768902323,
    1374423290,
    # 987654321,
}

REQUIRED_CHANNEL_ID = "@technoloka"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª
CHANNEL_URL = "https://t.me/technoloka"
CHANNEL_NAME = "–¢–µ—Ö–Ω–æ–ª–æ–∂–∫–∞"



# === MIDDLEWARE ===

class UserUpdateMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    async def __call__(
            self,
            handler: Callable[[types.Update, Dict[str, Any]], Awaitable[Any]],
            event: types.Update,
            data: Dict[str, Any]
    ) -> Any:
        global db_manager

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–±—ã—Ç–∏—è
        user = None
        if hasattr(event, 'message') and event.message and event.message.from_user:
            user = event.message.from_user
        elif hasattr(event, 'callback_query') and event.callback_query and event.callback_query.from_user:
            user = event.callback_query.from_user
        elif hasattr(event, 'from_user'):
            user = event.from_user

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –∏ db_manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        if user and db_manager:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                user_exists = await db_manager.user_exists(user.id)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                update_needed = False
                username = first_name = last_name = None

                if hasattr(user, 'username') and user.username:
                    username = user.username
                    update_needed = True

                if hasattr(user, 'first_name') and user.first_name:
                    first_name = user.first_name
                    update_needed = True

                if hasattr(user, 'last_name') and user.last_name:
                    last_name = user.last_name
                    update_needed = True

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
                if update_needed or not user_exists:
                    await db_manager.update_user_info_selective(
                        user_id=user.id,
                        username=username,
                        first_name=first_name,
                        last_name=last_name
                    )

                    action = "–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π" if not user_exists else "–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
                    logging.debug(
                        f"{action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}: @{username}, {first_name} {last_name}")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)


class SubscriptionCheckMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""

    # –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
    ALLOWED_COMMANDS = {'/start'}
    ALLOWED_CALLBACKS = {'check_subscription'}

    async def __call__(
            self,
            handler: Callable[[types.Update, Dict[str, Any]], Awaitable[Any]],
            event: types.Update,
            data: Dict[str, Any]
    ) -> Any:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
        user = None
        is_command = False
        is_callback = False
        command_text = None
        callback_data = None

        if hasattr(event, 'message') and event.message and event.message.from_user:
            user = event.message.from_user
            if event.message.text and event.message.text.startswith('/'):
                is_command = True
                command_text = event.message.text.split()[0]
        elif hasattr(event, 'callback_query') and event.callback_query and event.callback_query.from_user:
            user = event.callback_query.from_user
            is_callback = True
            callback_data = event.callback_query.data

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not user:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
        if is_command and command_text in self.ALLOWED_COMMANDS:
            return await handler(event, data)

        if is_callback and callback_data in self.ALLOWED_CALLBACKS:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if not await check_user_subscription(user.id):
            # –ï—Å–ª–∏ —ç—Ç–æ callback query, –æ—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ callback
            if is_callback:
                await event.callback_query.answer(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
                    show_alert=True
                )
                return

            # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
            if hasattr(event, 'message'):
                await send_subscription_request(event.message)
                return

        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)

class LoggingMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""

    async def __call__(
            self,
            handler: Callable[[types.Update, Dict[str, Any]], Awaitable[Any]],
            event: types.Update,
            data: Dict[str, Any]
    ) -> Any:
        logging.info(f"=== –ü–û–õ–£–ß–ï–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï ===")
        logging.info(f"–¢–∏–ø —Å–æ–±—ã—Ç–∏—è: {type(event).__name__}")

        if hasattr(event, 'message') and event.message:
            msg = event.message
            logging.info(f"–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {msg.content_type}")
            logging.info(f"Chat ID: {msg.chat.id}")
            if msg.from_user:
                logging.info(f"User ID: {msg.from_user.id}")
                logging.info(f"Username: @{msg.from_user.username or 'None'}")
                logging.info(f"Name: {msg.from_user.first_name or ''} {msg.from_user.last_name or ''}")
            if hasattr(msg, 'text') and msg.text:
                logging.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {msg.text[:100]}...")

        try:
            result = await handler(event, data)
            logging.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            return result
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
            raise


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
def create_subscription_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = [
        [InlineKeyboardButton(text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {CHANNEL_NAME}", url=CHANNEL_URL)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def check_user_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(REQUIRED_CHANNEL_ID, user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å: member, administrator, creator
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


async def check_user_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(REQUIRED_CHANNEL_ID, user_id)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å: member, administrator, creator
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


async def send_subscription_request(message: types.Message):
    subscription_text = (
        "‚ù§Ô∏è –Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—Å–ø–µ—Ö–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è, "
        "—Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è –∑–∞–¥–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç –ª—é–±—É—é —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω—É.\n\n"
        "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.\n"
        f"‚Ä¢ [{CHANNEL_NAME}]({CHANNEL_URL})\n\n"
        "‚≠êÔ∏è –ú—ã –ø—Ä–æ—Å–∏–º —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤ –∏ –∑–∞ —ç—Ç–æ –º—ã –¥–∞—Ä–∏–º –≤–∞–º "
        "–ø–æ 5 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."
    )

    await message.answer(
        subscription_text,
        reply_markup=create_subscription_keyboard(),
        parse_mode="Markdown"
    )

def create_model_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    keyboard = []
    models = list(BotConfig.MODEL_NAMES.items())

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(models), 2):
        row = []
        for j in range(2):
            if i + j < len(models):
                model_key, model_name = models[i + j]
                row.append(InlineKeyboardButton(
                    text=model_name,
                    callback_data=f"model_{model_key}"
                ))
        keyboard.append(row)

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    keyboard = [
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
            InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")
        ],
        [
            InlineKeyboardButton(text="üíé –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VIP", callback_data="admin_set_vip"),
            InlineKeyboardButton(text="‚≠ê –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Premium", callback_data="admin_set_premium")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def send_long_message(message: types.Message, text: str, parse_mode: str = "Markdown"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    """
    MAX_MESSAGE_LENGTH = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ 4096

    if len(text) <= MAX_MESSAGE_LENGTH:
        try:
            await message.answer(text, parse_mode=parse_mode)
        except Exception as e:
            await message.answer(text)
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    current_part = ""
    lines = text.split('\n')

    for line in lines:
        if len(line) > MAX_MESSAGE_LENGTH:
            if current_part:
                parts.append(current_part.strip())
                current_part = ""

            words = line.split(' ')
            temp_line = ""

            for word in words:
                if len(temp_line + " " + word) > MAX_MESSAGE_LENGTH:
                    if temp_line:
                        parts.append(temp_line.strip())
                    temp_line = word
                else:
                    temp_line = temp_line + " " + word if temp_line else word

            if temp_line:
                current_part = temp_line
        else:
            if len(current_part + "\n" + line) > MAX_MESSAGE_LENGTH:
                parts.append(current_part.strip())
                current_part = line
            else:
                current_part = current_part + "\n" + line if current_part else line

    if current_part:
        parts.append(current_part.strip())

    for i, part in enumerate(parts):
        if not part.strip():
            continue

        if len(parts) > 1:
            part_header = f"üìÑ **–ß–∞—Å—Ç—å {i + 1}/{len(parts)}**\n\n"
            part = part_header + part

        try:
            await message.answer(part, parse_mode=parse_mode)
        except Exception as e:
            await message.answer(part)

        if i < len(parts) - 1:
            await asyncio.sleep(0.5)


def detect_and_translate_to_english(text: str) -> tuple[str, bool]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    """
    try:
        cyrillic_chars = sum(1 for char in text if '–∞' <= char.lower() <= '—è' or char.lower() in '—ë')
        total_letters = sum(1 for char in text if char.isalpha())

        if total_letters > 0 and (cyrillic_chars / total_letters) > 0.3:
            translator = GoogleTranslator(source='ru', target='en')
            translated = translator.translate(text)
            return translated, True
        else:
            return text, False

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text, False


async def download_image_as_base64(file_id: str) -> tuple[str, str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ base64"""
    try:
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path

        if file_path.lower().endswith('.jpg') or file_path.lower().endswith('.jpeg'):
            mime_type = "image/jpeg"
        elif file_path.lower().endswith('.png'):
            mime_type = "image/png"
        elif file_path.lower().endswith('.gif'):
            mime_type = "image/gif"
        elif file_path.lower().endswith('.webp'):
            mime_type = "image/webp"
        else:
            mime_type = "image/jpeg"

        file_url = f"https://api.telegram.org/file/bot{BotConfig.BOT_TOKEN}/{file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status == 200:
                    image_data = await response.read()
                    if len(image_data) > 20 * 1024 * 1024:
                        raise Exception("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–±–æ–ª–µ–µ 20MB)")

                    base64_image = base64.b64encode(image_data).decode('utf-8')
                    return base64_image, mime_type
                else:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {response.status}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise


def clean_markdown_for_telegram(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ Telegram"""

    def replace_math_symbols(formula):
        replacements = {
            r'\\frac\{([^}]+)\}\{([^}]+)\}': r'\1/\2',
            r'\\cdot': '¬∑', r'\\times': '√ó', r'\\div': '√∑', r'\\pm': '¬±',
            r'\\approx': '‚âà', r'\\neq': '‚â†', r'\\leq': '‚â§', r'\\geq': '‚â•',
            r'\\infty': '‚àû', r'\\sum': '‚àë', r'\\sqrt': '‚àö', r'\\pi': 'œÄ'
        }

        for pattern, replacement in replacements.items():
            formula = re.sub(pattern, replacement, formula)

        return formula.strip()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LaTeX —Ñ–æ—Ä–º—É–ª—ã
    text = re.sub(r'\\\[(.*?)\\\]', lambda m: f"\n```\n{replace_math_symbols(m.group(1))}\n```\n", text,
                  flags=re.DOTALL)
    text = re.sub(r'\\\((.*?)\\\)', lambda m: f"`{replace_math_symbols(m.group(1))}`", text, flags=re.DOTALL)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\\(?![*_`\[\]()])', '', text)
    text = re.sub(r'###\s*([^\n]+)', r'\n\1\n', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r'\n{4,}', '\n\n', text)

    return text.strip()


async def update_processing_message(chat_id: int, message_id: int, dots_count: int,
                                    base_text: str = "üß† –ü–æ–º–æ—â–Ω–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ç–æ—á–µ–∫"""
    dots = "." * (dots_count % 4)
    try:
        await bot.edit_message_text(
            f"{base_text}{dots}",
            chat_id=chat_id,
            message_id=message_id
        )
    except Exception:
        pass


async def show_processing_animation(chat_id: int, message_id: int, duration: float,
                                    base_text: str = "üß† –ü–æ–º–æ—â–Ω–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ"):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    start_time = asyncio.get_event_loop().time()
    dots_count = 0

    while asyncio.get_event_loop().time() - start_time < duration:
        await update_processing_message(chat_id, message_id, dots_count, base_text)
        dots_count += 1
        await asyncio.sleep(PROCESSING_INTERVAL)


async def process_message_with_ai(history: list, processing_msg: types.Message, user_model: str = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI"""
    animation_task = asyncio.create_task(
        show_processing_animation(
            processing_msg.chat.id,
            processing_msg.message_id,
            TIMEOUT
        )
    )

    try:
        has_images = any(
            isinstance(msg.get("content"), list) and
            any(item.get("type") == "image_url" for item in msg.get("content", []))
            for msg in history if msg.get("role") == "user"
        )

        if user_model and user_model in BotConfig.MODELS:
            if has_images and user_model not in BotConfig.VISION_MODELS:
                model = BotConfig.MODELS["gpt-4o-mini"]
            else:
                model = BotConfig.MODELS[user_model]
        else:
            model = BotConfig.MODELS[BotConfig.DEFAULT_MODEL]

        completion = await asyncio.wait_for(
            text_client.chat.completions.create(
                extra_headers={
                    "HTTP-Referer": "https://kuzotgpro.com",
                    "X-Title": "Kuzo telegram gpt",
                },
                model=model,
                messages=history
            ),
            timeout=TIMEOUT
        )

        animation_task.cancel()
        response_text = completion.choices[0].message.content

        if not response_text or len(response_text.strip()) < 3:
            raise RuntimeError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI")

        return response_text

    except asyncio.TimeoutError:
        animation_task.cancel()
        raise RuntimeError(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({TIMEOUT}s)")
    except Exception as e:
        animation_task.cancel()
        raise e


def get_system_message():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI"""
    return {
        "role": "system",
        "content": (
            "–¢–µ–±—è –∑–æ–≤—É—Ç –ü–æ–º–æ—â–Ω–∏–∫. –¢—ã —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. "
            "–¢—ã –æ—Ç–ª–∏—á–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–µ—à–∞–µ—à—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, —á–∏—Ç–∞–µ—à—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫, "
            "–æ–±—ä—è—Å–Ω—è–µ—à—å —Å—Ö–µ–º—ã –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã, –ø–æ–º–æ–≥–∞–µ—à—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º.\n\n"

            "–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø TELEGRAM:\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–π Markdown, –Ω–æ –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π LaTeX —Ñ–æ—Ä–º—É–ª—ã \\[...\\] –∏–ª–∏ \\(...\\)\n"
            "2. –î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –∏—Å–ø–æ–ª—å–∑—É–π Unicode —Å–∏–º–≤–æ–ª—ã: √∑, √ó, ‚âà, ¬≤, ¬≥, ‚â§, ‚â•, œÄ, ‚àö, ‚àû\n"
            "3. –ö–æ–¥ –≤ –±—ç–∫—Ç–∏–∫–∞—Ö –¥–ª—è —Ñ–æ—Ä–º—É–ª: `x¬≤ + y¬≤ = z¬≤`\n"
            "4. –ë–ª–æ–∫–∏ –∫–æ–¥–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π\n"
            "5. –ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª—è–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏\n"
            "6. –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã **–∂–∏—Ä–Ω—ã–º** —Ç–µ–∫—Å—Ç–æ–º\n\n"

            "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ - –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –µ–≥–æ –∏ —Ä–µ—à–∏ –ø–æ—à–∞–≥–æ–≤–æ."
        )
    }


async def generate_image(prompt: str, model: str = "flux") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL"""
    english_prompt, was_translated = detect_and_translate_to_english(prompt)

    response = await img_client.images.async_generate(
        model=model,
        prompt=english_prompt,
        response_format="url"
    )
    return response.data[0].url, english_prompt, was_translated


async def handle_image_message(message: types.Message, state: FSMContext, file_id: str, caption: str = None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–æ–≤"""
    global db_manager

    if db_manager is None:
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
        return

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    limit_check = await db_manager.check_limit(user_id, "photo_analysis")

    if not limit_check["allowed"]:
        limit_message = db_manager.get_limit_message(user_id, "photo_analysis", limit_check)
        await message.answer(limit_message, parse_mode="Markdown")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç
    if not await db_manager.use_limit(user_id, "photo_analysis"):
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    remaining = limit_check["remaining"] - 1
    processing_text = f"üñº –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{limit_check['limit']})"
    processing_msg = await message.answer(processing_text)

    try:
        base64_image, mime_type = await download_image_as_base64(file_id)

        data = await state.get_data()
        history = data.get("history", [])
        current_model = data.get("current_model", BotConfig.DEFAULT_MODEL)

        if not history:
            history.append(get_system_message())

        user_message = {
            "role": "user",
            "content": [
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:{mime_type};base64,{base64_image}",
                        "detail": "high"
                    }
                }
            ]
        }

        if caption:
            user_message["content"].append({"type": "text", "text": caption})
        else:
            user_message["content"].append({
                "type": "text",
                "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ. –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç - –ø—Ä–æ—á–∏—Ç–∞–π –∏ —Ä–µ—à–∏."
            })

        history.append(user_message)

        if len(history) > MAX_HISTORY * 2 + 1:
            system_msg = history[0] if history[0]["role"] == "system" else None
            recent_history = history[-(MAX_HISTORY * 2):]
            if system_msg:
                history = [system_msg] + recent_history
            else:
                history = recent_history

        response_text = await process_message_with_ai(history, processing_msg, current_model)

        history.append({"role": "assistant", "content": response_text})
        await state.update_data(history=history)

        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except Exception:
            pass

        model_name = BotConfig.MODEL_NAMES[current_model]
        status = await db_manager.get_user_status(user_id)
        remaining_now = status["limits"]["photo_analysis"]["remaining"]

        full_response = f"ü§ñ {model_name}\nüìä –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {remaining_now}/{limit_check['limit']}\n\n" + clean_markdown_for_telegram(
            response_text)
        await send_long_message(message, full_response)

    except Exception as e:
        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except Exception:
            pass

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )


# === –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    global db_manager

    await state.clear()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ db_manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if db_manager is None:
        await message.answer("‚ö†Ô∏è –ë–æ—Ç –µ—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_user_subscription(user_id):
        await send_subscription_request(message)
        return

    try:
        status = await db_manager.get_user_status(user_id)
        subscription_type = status["subscription_type"].title()

        # –î–∞–µ–º –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –∏–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        #bonus_given = await db_manager.give_subscription_bonus(user_id)
        #bonus_text = "\nüéÅ –ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤—ã –ø–æ–ª—É—á–∏–ª–∏ +5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º!" if bonus_given else ""

        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ–º–æ—â–Ω–∏–∫. –Ø –∏—Å–ø–æ–ª—å–∑—É—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n\n"
            "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/model` - –í—ã–±—Ä–∞—Ç—å AI –º–æ–¥–µ–ª—å\n"
            "‚Ä¢ `/new` - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç\n"
            "‚Ä¢ `/image <–æ–ø–∏—Å–∞–Ω–∏–µ>` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
            "‚Ä¢ `/mj <–æ–ø–∏—Å–∞–Ω–∏–µ>` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É Midjourney 6.0\n"
            "‚Ä¢ `/limits` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã\n"
            "‚Ä¢ `/help` - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí¨ –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n"
            f"üì± –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{BotConfig.MODEL_NAMES[BotConfig.DEFAULT_MODEL]}**\n"
            f"üíé –í–∞—à —Ç–∞—Ä–∏—Ñ: **{subscription_type}**",
            #f"{bonus_text}",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )


@dp.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback_query.from_user.id

    if await check_user_subscription(user_id):
        await callback_query.message.delete()

        # –î–∞–µ–º –±–æ–Ω—É—Å –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
        if db_manager:
           #bonus_given = await db_manager.give_subscription_bonus(user_id)
           bonus_text = "\nüéÅ –ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –≤—ã –ø–æ–ª—É—á–∏–ª–∏ +5 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º!" #if bonus_given else ""
        else:
            bonus_text = ""

        await callback_query.message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
            "üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ–º–æ—â–Ω–∏–∫. –Ø –∏—Å–ø–æ–ª—å–∑—É—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n\n"
            "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "‚Ä¢ `/model` - –í—ã–±—Ä–∞—Ç—å AI –º–æ–¥–µ–ª—å\n"
            "‚Ä¢ `/new` - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç\n"
            "‚Ä¢ `/image <–æ–ø–∏—Å–∞–Ω–∏–µ>` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
            "‚Ä¢ `/mj <–æ–ø–∏—Å–∞–Ω–∏–µ>` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É Midjourney 6.0\n"
            "‚Ä¢ `/limits` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã\n"
            "‚Ä¢ `/help` - –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üí¨ –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!\n"
            f"üì± –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{BotConfig.MODEL_NAMES[BotConfig.DEFAULT_MODEL]}**"
            f"{bonus_text}",
            parse_mode="Markdown"
        )
        await callback_query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    else:
        await callback_query.answer(
            f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_NAME}",
            show_alert=True
        )

@dp.message(Command("limits"))
async def limits_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global db_manager

    if db_manager is None:
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
        return

    user_id = message.from_user.id

    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
        if not await db_manager.user_exists(user_id):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            await db_manager.update_user_info_selective(
                user_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            logging.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏ –≤—ã–∑–æ–≤–µ /limits")

        status = await db_manager.get_user_status(user_id)

        subscription_type = status["subscription_type"].title()
        username = status.get("username")
        display_name = f"@{username}" if username else f"ID: {user_id}"

        limits_text = f"üìä **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã** ({display_name})\n\n"
        limits_text += f"üíé –¢–∞—Ä–∏—Ñ: **{subscription_type}**\n"

        if status["subscription_expires"]:
            from datetime import datetime
            expires = datetime.fromisoformat(status["subscription_expires"])
            limits_text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y')}\n"

        limits_text += f"\nüìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n\n"

        limit_names = {
            "photo_analysis": "üñº –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "flux_generation": "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Flux",
            "midjourney_generation": "üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Midjourney",
            "text_requests": "üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
        }

        for limit_type, limit_info in status["limits"].items():
            if limit_type in limit_names:
                name = limit_names[limit_type]
                used = limit_info["used"]
                limit = limit_info["limit"]
                remaining = limit_info["remaining"]

                if limit >= 999999:
                    limits_text += f"{name}: {used} ‚ôæÔ∏è\n"
                else:
                    percentage = (used / limit * 100) if limit > 0 else 0
                    bar = "üü©" * (int(percentage / 10)) + "‚¨ú" * (10 - int(percentage / 10))
                    limits_text += f"{name}: {used}/{limit} ({remaining} –æ—Å—Ç–∞–ª–æ—Å—å)\n{bar}\n\n"

        if status["subscription_type"] == "free":
            limits_text += "\nüíé **–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π?**\n"
            limits_text += "‚Ä¢ Premium: —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã\n"
            limits_text += "‚Ä¢ VIP: –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
            limits_text += "üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"

        limits_text += f"\nüîÑ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00"

        await message.answer(limits_text, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /limits –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."
        )


@dp.message(Command("model"))
async def model_cmd(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ AI"""
    data = await state.get_data()
    current_model = data.get("current_model", BotConfig.DEFAULT_MODEL)
    current_model_name = BotConfig.MODEL_NAMES[current_model]

    await message.answer(
        f"ü§ñ **–í—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏**\n\n"
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{current_model_name}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=create_model_keyboard(),
        parse_mode="Markdown"
    )


@dp.callback_query(F.data.startswith("model_"))
async def handle_model_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    model_key = callback_query.data.split("_", 1)[1]

    if model_key in BotConfig.MODELS:
        await state.update_data(current_model=model_key)
        model_name = BotConfig.MODEL_NAMES[model_key]

        await callback_query.message.edit_text(
            f"‚úÖ **–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞**\n\n"
            f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: **{model_name}**\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é.",
            parse_mode="Markdown"
        )

        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")
    else:
        await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å", show_alert=True)


@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    global db_manager

    user_id = message.from_user.id

    if db_manager is not None:
        try:
            status = await db_manager.get_user_status(user_id)
            subscription_type = status["subscription_type"].title()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ /help –¥–ª—è {user_id}: {e}")
            subscription_type = "Free"
    else:
        subscription_type = "Free"

    await message.answer(
        "ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**\n\n"
        "üîπ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üîπ `/model` - –í—ã–±—Ä–∞—Ç—å AI –º–æ–¥–µ–ª—å\n"
        "üîπ `/new` –∏–ª–∏ `/newchat` - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n"
        "üîπ `/image <–æ–ø–∏—Å–∞–Ω–∏–µ>` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "üîπ `/mj <–æ–ø–∏—Å–∞–Ω–∏–µ>` - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Midjourney 6.0\n"
        "üîπ `/limits` - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã\n"
        "üîπ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏:**\n\n" +
        "\n".join([f"‚Ä¢ {name}" for name in BotConfig.MODEL_NAMES.values()]) +
        f"\n\nüíé **–í–∞—à —Ç–∞—Ä–∏—Ñ: {subscription_type}**\n\n"
        "üìù **–ß—Ç–æ —è —É–º–µ—é:**\n\n"
        "üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫\n"
        "üßÆ –†–µ—à–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ—à–∞–≥–æ–≤–æ\n"
        "üìä –û–±—ä—è—Å–Ω—è—Ç—å —Å—Ö–µ–º—ã, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã\n"
        "üíª –ü–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n"
        "üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n\n"
        "**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É!**",
        parse_mode="Markdown"
    )


@dp.message(Command("image"))
async def image_cmd(message: types.Message):
    global db_manager

    text = message.text or ""
    args = text[len("/image"):].strip()
    if not args:
        return await message.answer(
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:\n`/image <–æ–ø–∏—Å–∞–Ω–∏–µ>`",
            parse_mode="Markdown"
        )

    if db_manager is None:
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
        return

    user_id = message.from_user.id

    try:
        limit_check = await db_manager.check_limit(user_id, "flux_generation")

        if not limit_check["allowed"]:
            limit_message = db_manager.get_limit_message(user_id, "flux_generation", limit_check)
            await message.answer(limit_message, parse_mode="Markdown")
            return

        if not await db_manager.use_limit(user_id, "flux_generation"):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        await bot.send_chat_action(message.chat.id, "upload_photo")

        url, english_prompt, was_translated = await generate_image(args)

        status = await db_manager.get_user_status(user_id)
        remaining = status["limits"]["flux_generation"]["remaining"]
        limit_total = status["limits"]["flux_generation"]["limit"]

        if was_translated:
            caption = (
                f"üñº –í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n"
                f"üá∑üá∫ `{args}`\n"
                f"üá∫üá∏ `{english_prompt}`\n"
                f"üé® Flux: {remaining}/{limit_total} –æ—Å—Ç–∞–ª–æ—Å—å"
            )
        else:
            caption = (
                f"üñº –í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n`{args}`\n"
                f"üé® Flux: {remaining}/{limit_total} –æ—Å—Ç–∞–ª–æ—Å—å"
            )

        await message.answer_photo(url, caption=caption, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")


@dp.message(Command("mj"))
async def mj_cmd(message: types.Message):
    global db_manager

    text = message.text or ""
    user_prompt = text[len("/mj"):].strip()
    if not user_prompt:
        return await message.answer(
            "‚ö†Ô∏è –£–∫–∞–∂–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è Midjourney 6.0:\n`/mj <–æ–ø–∏—Å–∞–Ω–∏–µ>`",
            parse_mode="Markdown"
        )

    if db_manager is None:
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
        return

    user_id = message.from_user.id

    try:
        limit_check = await db_manager.check_limit(user_id, "midjourney_generation")

        if not limit_check["allowed"]:
            limit_message = db_manager.get_limit_message(user_id, "midjourney_generation", limit_check)
            await message.answer(limit_message, parse_mode="Markdown")
            return

        if not await db_manager.use_limit(user_id, "midjourney_generation"):
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        remaining = limit_check["remaining"] - 1
        processing_msg = await message.answer(
            f"üé® Midjourney 6.0 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{limit_check['limit']})")

        animation_task = asyncio.create_task(
            show_processing_animation(
                chat_id=processing_msg.chat.id,
                message_id=processing_msg.message_id,
                duration=TIMEOUT,
                base_text="üé® Midjourney 6.0 –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            )
        )

        url = None
        english_prompt = user_prompt
        was_translated = False

        try:
            url, english_prompt, was_translated = await generate_image(user_prompt, "midjourney-6.0")
        except Exception as e:
            logging.error(f"Midjourney 6.0 error: {e}")
        finally:
            animation_task.cancel()
            try:
                await bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
            except:
                pass

        if not url:
            return await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ Midjourney. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        status = await db_manager.get_user_status(user_id)
        remaining_now = status["limits"]["midjourney_generation"]["remaining"]
        limit_total = status["limits"]["midjourney_generation"]["limit"]

        await message.answer_photo(
            url,
            caption=(
                f"üñº Midjourney 6.0 –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n"
                f"‚Ä¢ –∏—Å—Ö–æ–¥–Ω—ã–π: `{user_prompt}`\n"
                f"‚Ä¢ –∞–Ω–≥–ª.: `{english_prompt}`\n"
                f"üé≠ MJ: {remaining_now}/{limit_total} –æ—Å—Ç–∞–ª–æ—Å—å"
            ),
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /mj –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command(commands=["new", "newchat"]))
async def new_chat_cmd(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_model = data.get("current_model", BotConfig.DEFAULT_MODEL)

    await state.clear()
    await state.update_data(current_model=current_model)

    model_name = BotConfig.MODEL_NAMES[current_model]
    await message.answer(
        f"üÜï –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç!\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: **{model_name}**\n\n"
        f"–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!",
        parse_mode="Markdown"
    )


# === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("admin"))
async def admin_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await message.answer(
        "üîß **–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_admin_keyboard(),
        parse_mode="Markdown"
    )


@dp.message(Command("admin_stats"))
async def admin_stats_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    global db_manager

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if db_manager is None:
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    try:
        stats = await db_manager.get_statistics(days=7)

        stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π**\n\n"
        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{stats['total_users']}**\n\n"

        stats_text += "üíé **–ü–æ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–∫–∏:**\n"
        for sub_type, count in stats['subscription_stats'].items():
            stats_text += f"‚Ä¢ {sub_type.title()}: {count}\n"

        stats_text += "\nüéØ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        for feature in stats['feature_usage'][:5]:  # –¢–æ–ø 5
            stats_text += f"‚Ä¢ {feature['limit_type']}: {feature['total_usage']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"

        stats_text += "\nüìà **–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º:**\n"
        for day in stats['daily_activity'][-7:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            date = day['date']
            usage = day['total_usage']
            stats_text += f"‚Ä¢ {date}: {usage} –¥–µ–π—Å—Ç–≤–∏–π\n"

        await message.answer(stats_text, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@dp.message(Command("admin_set_vip"))
async def admin_set_vip_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VIP —Å—Ç–∞—Ç—É—Å–∞"""
    global db_manager

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if db_manager is None:
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_set_vip <user_id>")
            return

        target_user_id = int(args[1])
        await db_manager.add_vip_user(target_user_id)

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –ø–æ–ª—É—á–∏–ª VIP —Å—Ç–∞—Ç—É—Å")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("admin_set_premium"))
async def admin_set_premium_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Premium –ø–æ–¥–ø–∏—Å–∫–∏"""
    global db_manager

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if db_manager is None:
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_set_premium <user_id> <days>")
            return

        target_user_id = int(args[1])
        days = int(args[2])

        await db_manager.set_subscription(target_user_id, "premium", days)

        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –ø–æ–ª—É—á–∏–ª Premium –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –¥–Ω–µ–π")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("admin_user_info"))
async def admin_user_info_cmd(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    global db_manager

    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if db_manager is None:
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return

    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_user_info <user_id>")
            return

        target_user_id = int(args[1])
        status = await db_manager.get_user_status(target_user_id)

        username = status.get("username")
        first_name = status.get("first_name", "")
        last_name = status.get("last_name", "")

        display_name = f"@{username}" if username else "–ù–µ—Ç username"
        full_name = f"{first_name} {last_name}".strip() or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        info_text = f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n"
        info_text += f"üÜî ID: `{target_user_id}`\n"
        info_text += f"üë§ Username: {display_name}\n"
        info_text += f"üìù –ò–º—è: {full_name}\n"
        info_text += f"üíé –¢–∞—Ä–∏—Ñ: **{status['subscription_type'].title()}**\n"

        if status['subscription_expires']:
            expires = datetime.fromisoformat(status['subscription_expires'])
            info_text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y %H:%M')}\n"

        info_text += f"\nüìä **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:**\n"

        limit_names = {
            "photo_analysis": "üñº –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "flux_generation": "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Flux",
            "midjourney_generation": "üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Midjourney",
            "text_requests": "üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
        }

        for limit_type, limit_info in status['limits'].items():
            if limit_type in limit_names:
                name = limit_names[limit_type]
                used = limit_info['used']
                limit = limit_info['limit']
                info_text += f"‚Ä¢ {name}: {used}/{limit}\n"

        await message.answer(info_text, parse_mode="Markdown")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# === CALLBACK HANDLERS ===
@dp.callback_query(F.data == "admin_stats")
async def handle_admin_stats_callback(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    global db_manager

    if callback_query.from_user.id not in ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    if db_manager is None:
        await callback_query.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ë–î –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", show_alert=True)
        return

    try:
        stats = await db_manager.get_statistics(days=7)

        stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π**\n\n"
        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{stats['total_users']}**\n\n"

        stats_text += "üíé **–ü–æ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–∫–∏:**\n"
        for sub_type, count in stats['subscription_stats'].items():
            stats_text += f"‚Ä¢ {sub_type.title()}: {count}\n"

        stats_text += "\nüéØ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n"
        for feature in stats['feature_usage'][:3]:
            stats_text += f"‚Ä¢ {feature['limit_type']}: {feature['total_usage']}\n"

        await callback_query.message.edit_text(stats_text, parse_mode="Markdown")
        await callback_query.answer()

    except Exception as e:
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


# === –ú–ï–î–ò–ê –ö–û–ù–¢–ï–ù–¢ ===
@dp.message(F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    photo = message.photo[-1]
    await handle_image_message(message, state, photo.file_id, message.caption)


@dp.message(F.document)
async def handle_document(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤)"""
    document = message.document

    if document.mime_type and document.mime_type.startswith('image/'):
        await handle_image_message(message, state, document.file_id, message.caption)
    else:
        await message.answer(
            "üìÑ –Ø –º–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ –∏–ª–∏ –∫–∞–∫ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG, GIF –∏–ª–∏ WebP."
        )


@dp.message(F.video)
async def handle_video(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ"""
    await message.answer(
        "üé• –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ.\n"
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    )


@dp.message(F.voice)
async def handle_voice(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "üé§ –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    )


@dp.message(F.sticker)
async def handle_sticker(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤"""
    await message.answer("üòä –°–∏–º–ø–∞—Ç–∏—á–Ω—ã–π —Å—Ç–∏–∫–µ—Ä! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")


# === –¢–ï–ö–°–¢–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
@dp.message(F.text.startswith('/'))
async def handle_unknown_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
    command = message.text.split()[0]
    await message.answer(
        f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: `{command}`\n\n"
        f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        f"‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        f"‚Ä¢ `/help` - –°–ø—Ä–∞–≤–∫–∞\n"
        f"‚Ä¢ `/model` - –í—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏\n"
        f"‚Ä¢ `/new` - –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n"
        f"‚Ä¢ `/limits` - –í–∞—à–∏ –ª–∏–º–∏—Ç—ã\n"
        f"‚Ä¢ `/image <–æ–ø–∏—Å–∞–Ω–∏–µ>` - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        f"‚Ä¢ `/mj <–æ–ø–∏—Å–∞–Ω–∏–µ>` - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è Midjourney 6.0\n\n"
        f"üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã!",
        parse_mode="Markdown"
    )


@dp.message(F.text & ~F.text.startswith('/'))
async def handle_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–Ω–µ –∫–æ–º–∞–Ω–¥)"""
    global db_manager

    user_text = message.text
    user_id = message.from_user.id

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {user_text[:50]}...")

    if db_manager is None:
        await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...")
        return

    try:
        limit_check = await db_manager.check_limit(user_id, "text_requests")
        if not limit_check["allowed"]:
            limit_message = db_manager.get_limit_message(user_id, "text_requests", limit_check)
            await message.answer(limit_message, parse_mode="Markdown")
            return

        processing_msg = await message.answer("üß† –ü–æ–º–æ—â–Ω–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...")

        data = await state.get_data()
        history = data.get("history", [])
        current_model = data.get("current_model", BotConfig.DEFAULT_MODEL)

        if not history:
            history.append(get_system_message())

        history.append({"role": "user", "content": user_text})

        if len(history) > MAX_HISTORY * 2 + 1:
            system_msg = history[0] if history[0]["role"] == "system" else None
            recent_history = history[-(MAX_HISTORY * 2):]
            if system_msg:
                history = [system_msg] + recent_history
            else:
                history = recent_history

        response_text = await process_message_with_ai(history, processing_msg, current_model)

        history.append({"role": "assistant", "content": response_text})
        await state.update_data(history=history)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
        await db_manager.use_limit(user_id, "text_requests")

        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except Exception:
            pass

        model_name = BotConfig.MODEL_NAMES[current_model]
        full_response = f"ü§ñ {model_name}\n\n" + clean_markdown_for_telegram(response_text)
        await send_long_message(message, full_response)

    except Exception as e:
        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except Exception:
            pass

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ü–æ–º–æ—â–Ω–∏–∫—É: {e}")
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ü–æ–º–æ—â–Ω–∏–∫–∞\n"
            f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ\n"
            f"‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–†–£–ì–ò–• –°–û–ë–´–¢–ò–ô ===
@dp.callback_query()
async def handle_callback_query(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)"""
    if not callback_query.data.startswith(("model_", "admin_")):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback query: {callback_query.data}")
        await callback_query.answer("–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")


@dp.message()
async def handle_all_other(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞: {message.content_type}")
    await message.answer(
        "ü§î –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.\n"
        "üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help"
    )


async def on_startup():
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    global db_manager

    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ë–î
    config = DatabaseConfig.get_config_for_environment()

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
    db_manager = DatabaseManager(**config)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î
    await db_manager.init_database()

    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await on_startup()

    # –í–ê–ñ–ù–û: Middleware –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π)
    dp.update.middleware(SubscriptionCheckMiddleware())

    # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    dp.update.middleware(UserUpdateMiddleware())

    # 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
    dp.update.middleware(LoggingMiddleware())

    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ù–∞—á–∏–Ω–∞–µ–º polling...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())