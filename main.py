import asyncio
import logging
import base64
import aiohttp
import sys
from datetime import datetime
from typing import Any, Awaitable, Callable, Dict
import speech_recognition as sr
import pydub
import re
from pydub import AudioSegment
import tempfile
import os
import PyPDF2
import docx
from io import BytesIO
from aiogram import Bot, Dispatcher, types, F, BaseMiddleware
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton, LabeledPrice)
from openai import AsyncOpenAI
import g4f
from g4f.client import Client
from deep_translator import GoogleTranslator
# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from config import BotConfig
from database import DatabaseManager

WHISPER_AVAILABLE = False
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ],
    force=True  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–≥–≥–µ—Ä—ã
)

bot = Bot(token=BotConfig.BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
db_manager = DatabaseManager()

# –ö–ª–∏–µ–Ω—Ç—ã AI
text_client = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=BotConfig.OPENAPI,
)
img_client = Client()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_HISTORY = 10
TIMEOUT = 30
PROCESSING_INTERVAL = 2


# === MIDDLEWARE ===
class UserUpdateMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

    async def __call__(
            self,
            handler: Callable[[types.Update, Dict[str, Any]], Awaitable[Any]],
            event: types.Update,
            data: Dict[str, Any]
    ) -> Any:
        user = None
        if hasattr(event, 'message') and event.message and event.message.from_user:
            user = event.message.from_user
        elif hasattr(event, 'callback_query') and event.callback_query and event.callback_query.from_user:
            user = event.callback_query.from_user

        if user:
            try:
                await db_manager.update_user_info(
                    user_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

        return await handler(event, data)


class SubscriptionCheckMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""

    ALLOWED_COMMANDS = {'/start', '/referral'}
    ALLOWED_CALLBACKS = {'check_subscription'}

    async def __call__(
            self,
            handler: Callable[[types.Update, Dict[str, Any]], Awaitable[Any]],
            event: types.Update,
            data: Dict[str, Any]
    ) -> Any:
        user = None
        is_command = False
        is_callback = False
        command_text = None
        callback_data = None

        if hasattr(event, 'message') and event.message and event.message.from_user:
            user = event.message.from_user
            if event.message.text and event.message.text.startswith('/'):
                is_command = True
                command_text = event.message.text.split()[0]
        elif hasattr(event, 'callback_query') and event.callback_query and event.callback_query.from_user:
            user = event.callback_query.from_user
            is_callback = True
            callback_data = event.callback_query.data

        if not user:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if is_command and command_text in self.ALLOWED_COMMANDS:
            return await handler(event, data)

        if is_callback and callback_data in self.ALLOWED_CALLBACKS:
            return await handler(event, data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        if not await check_user_subscription(user.id):
            if is_callback:
                await event.callback_query.answer(
                    "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
                    show_alert=True
                )
                return

            if hasattr(event, 'message'):
                await send_subscription_request(event.message)
                return

        return await handler(event, data)


# === –§–£–ù–ö–¶–ò–ò –ö–õ–ê–í–ò–ê–¢–£–† ===
def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [
            KeyboardButton(text="ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å"),
            KeyboardButton(text="üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
        ],
        [
            KeyboardButton(text="üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è"),
            KeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
        ],
        [
            KeyboardButton(text="üíé –ü–æ–¥–ø–∏—Å–∫–∞"),
            KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        ]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def create_subscription_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = [
        [InlineKeyboardButton(text=f"üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {BotConfig.CHANNEL_NAME}", url=BotConfig.CHANNEL_URL)],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_model_keyboard(current_model: str = None, is_premium: bool = False):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    keyboard = []

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –ø–æ —Ç–∏–ø–∞–º
    text_free_models = []
    text_premium_models = []
    image_free_models = []
    image_premium_models = []

    for model_key, model_info in BotConfig.MODELS.items():
        if model_info["model_type"] == "text":
            if model_info["is_premium"]:
                text_premium_models.append((model_key, model_info))
            else:
                text_free_models.append((model_key, model_info))
        elif model_info["model_type"] == "image":
            if model_info["is_premium"]:
                image_premium_models.append((model_key, model_info))
            else:
                image_free_models.append((model_key, model_info))

    # –î–æ–±–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
    if text_free_models:
        for model_key, model_info in text_free_models:
            name = BotConfig.MODEL_NAMES[model_key]
            if model_key == current_model:
                name = "‚úÖ " + name
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"model_{model_key}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –º–æ–¥–µ–ª–∏
    if text_premium_models:
        for model_key, model_info in text_premium_models:
            name = BotConfig.MODEL_NAMES[model_key]
            if not is_premium:
                name = "üîí " + name
            elif model_key == current_model:
                name = "‚úÖ " + name
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"model_{model_key}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if image_free_models:
        for model_key, model_info in image_free_models:
            name = BotConfig.MODEL_NAMES[model_key]
            if model_key == current_model:
                name = "‚úÖ " + name
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"model_{model_key}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if image_premium_models:
        for model_key, model_info in image_premium_models:
            name = BotConfig.MODEL_NAMES[model_key]
            if not is_premium:
                name = "üîí " + name
            elif model_key == current_model:
                name = "‚úÖ " + name
            keyboard.append([InlineKeyboardButton(text=name, callback_data=f"model_{model_key}")])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_generation_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    keyboard = [
        [InlineKeyboardButton(text="üé® Flux", callback_data="gen_flux")],
        [InlineKeyboardButton(text="üé≠ Midjourney", callback_data="gen_midjourney")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_subscription_plans_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = [
        [InlineKeyboardButton(text="üî• –ü—Ä–æ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è - 1‚≠ê", callback_data="buy_week_trial")],
        [InlineKeyboardButton(text="üìÖ –ú–µ—Å—è—Ü - 555‚≠ê", callback_data="buy_month")],
        [InlineKeyboardButton(text="üí∞ 3 –º–µ—Å—è—Ü–∞ - 1111‚≠ê", callback_data="buy_3months")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def check_user_subscription(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(BotConfig.REQUIRED_CHANNEL_ID, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False


async def send_subscription_request(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É"""
    subscription_text = (
        "‚ù§Ô∏è –Ø ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—Å–ø–µ—Ö–µ, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –ø–æ–¥–¥–µ—Ä–∂–∏—Ç —Ç–µ–±—è, "
        "—Å–¥–µ–ª–∞–µ—Ç –∑–∞ —Ç–µ–±—è –∑–∞–¥–∞–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω–∏—Ç –ª—é–±—É—é —Ä–∞–±–æ—Ç—É –∏–ª–∏ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–∞—Ä—Ç–∏–Ω—É.\n\n"
        "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.\n"
        f"‚Ä¢ [{BotConfig.CHANNEL_NAME}]({BotConfig.CHANNEL_URL})\n\n"
        "‚≠êÔ∏è –ú—ã –ø—Ä–æ—Å–∏–º —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –±–æ—Ç–æ–≤ –∏ –∑–∞ —ç—Ç–æ –º—ã –¥–∞—Ä–∏–º –≤–∞–º "
        "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."
    )

    await message.answer(
        subscription_text,
        reply_markup=create_subscription_keyboard(),
        parse_mode="Markdown"
    )


def get_system_message():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è AI"""
    return {
        "role": "system",
        "content": (
            "–¢–µ–±—è –∑–æ–≤—É—Ç –ü–æ–º–æ—â–Ω–∏–∫. –¢—ã —É–º–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏. "
            "–¢—ã –æ—Ç–ª–∏—á–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–µ—à–∞–µ—à—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏, —á–∏—Ç–∞–µ—à—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫, "
            "–æ–±—ä—è—Å–Ω—è–µ—à—å —Å—Ö–µ–º—ã –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã, –ø–æ–º–æ–≥–∞–µ—à—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º.\n\n"
            "–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø TELEGRAM:\n"
            "1. –ò—Å–ø–æ–ª—å–∑—É–π Markdown, –Ω–æ –ù–ò–ö–û–ì–î–ê –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π LaTeX —Ñ–æ—Ä–º—É–ª—ã \\[...\\] –∏–ª–∏ \\(...\\)\n"
            "2. –î–ª—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–æ—Ä–º—É–ª –∏—Å–ø–æ–ª—å–∑—É–π Unicode —Å–∏–º–≤–æ–ª—ã: √∑, √ó, ‚âà, ¬≤, ¬≥, ‚â§, ‚â•, œÄ, ‚àö, ‚àû\n"
            "3. –ö–æ–¥ –≤ –±—ç–∫—Ç–∏–∫–∞—Ö –¥–ª—è —Ñ–æ—Ä–º—É–ª: `x¬≤ + y¬≤ = z¬≤`\n"
            "4. –ë–ª–æ–∫–∏ –∫–æ–¥–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π\n"
            "5. –ü–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª—è–π —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏\n"
            "6. –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã **–∂–∏—Ä–Ω—ã–º** —Ç–µ–∫—Å—Ç–æ–º\n\n"
            "–ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ - –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –µ–≥–æ –∏ —Ä–µ—à–∏ –ø–æ—à–∞–≥–æ–≤–æ."
        )
    }


def clean_markdown_for_telegram(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ Telegram"""

    def replace_math_symbols(formula):
        replacements = {
            r'\\frac\{([^}]+)\}\{([^}]+)\}': r'\1/\2',
            r'\\cdot': '¬∑', r'\\times': '√ó', r'\\div': '√∑', r'\\pm': '¬±',
            r'\\approx': '‚âà', r'\\neq': '‚â†', r'\\leq': '‚â§', r'\\geq': '‚â•',
            r'\\infty': '‚àû', r'\\sum': '‚àë', r'\\sqrt': '‚àö', r'\\pi': 'œÄ'
        }

        for pattern, replacement in replacements.items():
            formula = re.sub(pattern, replacement, formula)
        return formula.strip()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LaTeX —Ñ–æ—Ä–º—É–ª—ã
    text = re.sub(r'\\\[(.*?)\\\]', lambda m: f"\n```\n{replace_math_symbols(m.group(1))}\n```\n", text,
                  flags=re.DOTALL)
    text = re.sub(r'\\\((.*?)\\\)', lambda m: f"`{replace_math_symbols(m.group(1))}`", text, flags=re.DOTALL)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'\\(?![*_`\[\]()])', '', text)
    text = re.sub(r'###\s*([^\n]+)', r'\n\1\n', text)
    text = re.sub(r'[ \t]+', ' ', text)
    text = re.sub(r'\n{4,}', '\n\n', text)

    return text.strip()


def detect_and_translate_to_english(text: str) -> tuple[str, bool]:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∫–∞–∫ fallback"""
    try:
        cyrillic_chars = sum(1 for char in text if '–∞' <= char.lower() <= '—è' or char.lower() in '—ë')
        total_letters = sum(1 for char in text if char.isalpha())

        if total_letters > 0 and (cyrillic_chars / total_letters) > 0.3:
            translator = GoogleTranslator(source='ru', target='en')
            translated = translator.translate(text)
            return translated, True
        else:
            return text, False

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text, False


async def translate_with_ai(text: str) -> tuple[str, bool]:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –ø–æ–º–æ—â—å—é AI –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ–≤–æ–¥
        cyrillic_chars = sum(1 for char in text if '–∞' <= char.lower() <= '—è' or char.lower() in '—ë')
        total_letters = sum(1 for char in text if char.isalpha())

        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏–ª–∏ –º–∞–ª–æ –±—É–∫–≤
        if total_letters == 0 or (cyrillic_chars / total_letters) < 0.3:
            return text, False

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å –ø–æ–º–æ—â—å—é AI
        translate_prompt = f"""–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π. 
–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ—á–Ω—ã–º –∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.
–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –ø–µ—Ä–µ–≤–æ–¥–æ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤.

–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: {text}"""

        history = [
            {
                "role": "system",
                "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–µ—Ä–µ–≤–æ–¥–∏ —Ç–æ—á–Ω–æ."
            },
            {
                "role": "user",
                "content": translate_prompt
            }
        ]

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        completion = await asyncio.wait_for(
            text_client.chat.completions.create(
                extra_headers={
                    "HTTP-Referer": "https://kuzotgpro.com",
                    "X-Title": "Kuzo telegram gpt",
                },
                model=BotConfig.MODELS["gemma3"]["api_name"],
                messages=history,
                max_tokens=200,
                temperature=0.3
            ),
            timeout=TIMEOUT
        )

        translated = completion.choices[0].message.content.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        if translated and len(translated) > 0:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
            translated = translated.strip('"').strip("'")
            return translated, True
        else:
            # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
            return detect_and_translate_to_english(text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ AI –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
        return detect_and_translate_to_english(text)


async def download_image_as_base64(file_id: str) -> tuple[str, str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ Telegram –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ base64"""
    try:
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path

        if file_path.lower().endswith('.jpg') or file_path.lower().endswith('.jpeg'):
            mime_type = "image/jpeg"
        elif file_path.lower().endswith('.png'):
            mime_type = "image/png"
        elif file_path.lower().endswith('.gif'):
            mime_type = "image/gif"
        elif file_path.lower().endswith('.webp'):
            mime_type = "image/webp"
        else:
            mime_type = "image/jpeg"

        file_url = f"https://api.telegram.org/file/bot{BotConfig.BOT_TOKEN}/{file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status == 200:
                    image_data = await response.read()
                    if len(image_data) > 20 * 1024 * 1024:
                        raise Exception("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–±–æ–ª–µ–µ 20MB)")

                    base64_image = base64.b64encode(image_data).decode('utf-8')
                    return base64_image, mime_type
                else:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {response.status}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise


async def process_message_with_ai(history: list, processing_msg: types.Message, user_model: str = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI"""
    try:
        has_images = any(
            isinstance(msg.get("content"), list) and
            any(item.get("type") == "image_url" for item in msg.get("content", []))
            for msg in history if msg.get("role") == "user"
        )

        model_info = BotConfig.MODELS.get(user_model, BotConfig.MODELS[BotConfig.DEFAULT_MODEL])

        # –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–æ–¥–µ–ª—å
        if model_info["model_type"] == "image":
            model_info = BotConfig.MODELS[BotConfig.DEFAULT_MODEL]

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç vision, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-4o Mini
        if has_images and not model_info["supports_vision"]:
            model_info = BotConfig.MODELS["gpt-4o-mini"]

        completion = await asyncio.wait_for(
            text_client.chat.completions.create(
                extra_headers={
                    "HTTP-Referer": "https://kuzotgpro.com",
                    "X-Title": "Kuzo telegram gpt",
                },
                model=model_info["api_name"],
                messages=history
            ),
            timeout=TIMEOUT
        )

        response_text = completion.choices[0].message.content

        if not response_text or len(response_text.strip()) < 3:
            raise RuntimeError("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI")

        return response_text

    except asyncio.TimeoutError:
        raise RuntimeError(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ ({TIMEOUT}s)")
    except Exception as e:
        raise e


async def generate_image(prompt: str, model: str = "flux") -> tuple[str, str, bool]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL, —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ —Ñ–ª–∞–≥ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    english_prompt, was_translated = await translate_with_ai(prompt)

    response = await img_client.images.async_generate(
        model=model,
        prompt=english_prompt,
        response_format="url"
    )
    return response.data[0].url, english_prompt, was_translated


async def send_long_message(message: types.Message, text: str, parse_mode: str = "Markdown"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ"""
    MAX_MESSAGE_LENGTH = 4000

    if len(text) <= MAX_MESSAGE_LENGTH:
        try:
            await message.answer(text, parse_mode=parse_mode)
        except Exception:
            await message.answer(text)
        return

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    parts = []
    current_part = ""
    lines = text.split('\n')

    for line in lines:
        if len(line) > MAX_MESSAGE_LENGTH:
            if current_part:
                parts.append(current_part.strip())
                current_part = ""

            words = line.split(' ')
            temp_line = ""

            for word in words:
                if len(temp_line + " " + word) > MAX_MESSAGE_LENGTH:
                    if temp_line:
                        parts.append(temp_line.strip())
                    temp_line = word
                else:
                    temp_line = temp_line + " " + word if temp_line else word

            if temp_line:
                current_part = temp_line
        else:
            if len(current_part + "\n" + line) > MAX_MESSAGE_LENGTH:
                parts.append(current_part.strip())
                current_part = line
            else:
                current_part = current_part + "\n" + line if current_part else line

    if current_part:
        parts.append(current_part.strip())

    for i, part in enumerate(parts):
        if not part.strip():
            continue

        if len(parts) > 1:
            part_header = f"üìÑ **–ß–∞—Å—Ç—å {i + 1}/{len(parts)}**\n\n"
            part = part_header + part

        try:
            await message.answer(part, parse_mode=parse_mode)
        except Exception:
            await message.answer(part)

        if i < len(parts) - 1:
            await asyncio.sleep(0.5)


def get_limit_type_for_model(model_key: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ª–∏–º–∏—Ç–∞ –¥–ª—è –º–æ–¥–µ–ª–∏"""
    model_info = BotConfig.MODELS.get(model_key)
    if not model_info:
        return "free_text_requests"

    # –î–ª—è –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ª–∏–º–∏—Ç—ã
    if model_info["model_type"] == "image":
        if model_key == "flux":
            return "flux_generation"
        elif model_key == "midjourney":
            return "midjourney_generation"

    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    return "premium_text_requests" if model_info["is_premium"] else "free_text_requests"


async def get_user_by_identifier(identifier: str) -> tuple[int, str]:
    """–ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ ID"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ identifier —á–∏—Å–ª–æ–º (ID)
    if identifier.isdigit():
        user_id = int(identifier)
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
            if await db_manager.user_exists(user_id):
                status = await db_manager.get_user_status(user_id)
                username = status.get('username')
                display_name = f"@{username}" if username else f"ID: {user_id}"
                return user_id, display_name
            else:
                return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        except Exception as e:
            return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"

    # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
    if identifier.startswith('@'):
        identifier = identifier[1:]

    # –ò—â–µ–º –ø–æ username –≤ –±–∞–∑–µ
    try:
        user_id = await db_manager.get_user_by_username(identifier)
        if user_id:
            return user_id, f"@{identifier}"
        else:
            return None, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}"


async def download_voice_as_wav(file_id: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ WAV"""
    temp_ogg = None
    temp_wav = None

    try:
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{BotConfig.BOT_TOKEN}/{file_path}"

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        temp_ogg = tempfile.NamedTemporaryFile(delete=False, suffix='.ogg')
        temp_wav = tempfile.NamedTemporaryFile(delete=False, suffix='.wav')

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        temp_ogg_path = temp_ogg.name
        temp_wav_path = temp_wav.name

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
        temp_ogg.close()
        temp_wav.close()

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status == 200:
                    audio_data = await response.read()

                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ
                    with open(temp_ogg_path, 'wb') as f:
                        f.write(audio_data)

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º pydub
                        audio = AudioSegment.from_file(temp_ogg_path, format="ogg")
                        audio = audio.set_frame_rate(16000).set_channels(1)  # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                        audio.export(temp_wav_path, format="wav")

                    except Exception as pydub_error:
                        logging.warning(f"–û—à–∏–±–∫–∞ pydub: {pydub_error}, –ø—Ä–æ–±—É–µ–º ffmpeg")
                        # –ï—Å–ª–∏ pydub –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ ffmpeg –Ω–∞–ø—Ä—è–º—É—é
                        import subprocess
                        result = subprocess.run([
                            'ffmpeg', '-i', temp_ogg_path,
                            '-acodec', 'pcm_s16le', '-ar', '16000', '-ac', '1',
                            temp_wav_path, '-y'
                        ], capture_output=True, text=True)

                        if result.returncode != 0:
                            raise Exception(f"FFmpeg –æ—à–∏–±–∫–∞: {result.stderr}")

                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π OGG —Ñ–∞–π–ª
                    try:
                        os.unlink(temp_ogg_path)
                    except:
                        pass

                    return temp_wav_path
                else:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ: {response.status}")

    except Exception as e:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        for path in [temp_ogg_path if 'temp_ogg_path' in locals() else None,
                     temp_wav_path if 'temp_wav_path' in locals() else None]:
            if path and os.path.exists(path):
                try:
                    os.unlink(path)
                except:
                    pass

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        raise


async def transcribe_audio(wav_file_path: str) -> str:
    """–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if not os.path.exists(wav_file_path):
            raise Exception("WAV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(wav_file_path)
        if file_size == 0:
            raise Exception("–ê—É–¥–∏–æ—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")

        if file_size > 25 * 1024 * 1024:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Google Speech API
            raise Exception("–ê—É–¥–∏–æ—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–±–æ–ª–µ–µ 25MB)")

        recognizer = sr.Recognizer()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        recognizer.energy_threshold = 300
        recognizer.dynamic_energy_threshold = True
        recognizer.pause_threshold = 0.8

        with sr.AudioFile(wav_file_path) as source:
            try:
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ
                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                audio_data = recognizer.record(source)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ audio_data –Ω–µ –ø—É—Å—Ç–æ–π
                if not hasattr(audio_data, 'frame_data') or len(audio_data.frame_data) == 0:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ")

            except Exception as audio_error:
                raise Exception(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_error}")

        # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        try:
            text = recognizer.recognize_google(audio_data, language='ru-RU')
            if text and text.strip():
                return text.strip()
        except sr.UnknownValueError:
            logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º")
        except sr.RequestError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ Google Speech API (ru): {e}")

        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –ø—Ä–æ–±—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        try:
            text = recognizer.recognize_google(audio_data, language='en-US')
            if text and text.strip():
                return text.strip()
        except sr.UnknownValueError:
            logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")
        except sr.RequestError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ Google Speech API (en): {e}")

        # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
        try:
            text = recognizer.recognize_google(audio_data)
            if text and text.strip():
                return text.strip()
        except sr.UnknownValueError:
            pass
        except sr.RequestError as e:
            logging.warning(f"–û—à–∏–±–∫–∞ Google Speech API (auto): {e}")

        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏: {e}")
        raise
    finally:
        # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            if os.path.exists(wav_file_path):
                os.unlink(wav_file_path)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {wav_file_path}: {e}")


async def download_document(file_id: str) -> tuple[bytes, str]:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ Telegram"""
    try:
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path
        file_url = f"https://api.telegram.org/file/bot{BotConfig.BOT_TOKEN}/{file_path}"

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as response:
                if response.status == 200:
                    file_data = await response.read()
                    return file_data, file_path
                else:
                    raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª: {response.status}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        raise

def extract_text_from_pdf(file_data: bytes) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF"""
    try:
        pdf_file = BytesIO(file_data)
        pdf_reader = PyPDF2.PdfReader(pdf_file)

        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text() + "\n"

        return text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")
        raise

def extract_text_from_docx(file_data: bytes) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ DOCX"""
    try:
        doc_file = BytesIO(file_data)
        doc = docx.Document(doc_file)

        text = ""
        for paragraph in doc.paragraphs:
            text += paragraph.text + "\n"

        return text.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ DOCX: {e}")
        raise

def extract_text_from_txt(file_data: bytes) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ TXT —Ñ–∞–π–ª–æ–≤"""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ UTF-8
        try:
            return file_data.decode('utf-8')
        except UnicodeDecodeError:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å UTF-8, –ø—Ä–æ–±—É–µ–º cp1251 (Windows)
            try:
                return file_data.decode('cp1251')
            except UnicodeDecodeError:
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - latin1
                return file_data.decode('latin1', errors='ignore')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ TXT: {e}")
        raise


async def process_refund(transaction_id: str, user_id: int, amount: any, display_name: str, message: types.Message,
                         from_db: bool) -> bool:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤"""
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram API
        refund_result = await bot.refund_star_payment(
            user_id=user_id,
            telegram_payment_charge_id=transaction_id
        )

        if refund_result:
            # –£—Å–ø–µ—à–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
            if from_db:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –≤ –ë–î
                try:
                    await db_manager.cancel_subscription(transaction_id)
                    db_status = "‚úÖ –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
                except Exception as db_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {db_error}")
                    db_status = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ë–î: {db_error}"
            else:
                db_status = "‚ÑπÔ∏è –ë–î –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–∞ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)"

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            await message.edit_text(
                f"‚úÖ **–í–æ–∑–≤—Ä–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
                f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {amount}‚≠ê\n"
                f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transaction_id[:20]}...`\n"
                f"üìä {db_status}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
                parse_mode="Markdown"
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                notification_text = (
                    f"üí∞ **–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤**\n\n"
                    f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                    f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transaction_id[:20]}...`\n"
                )

                if from_db:
                    notification_text += f"üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ: {amount} Telegram Stars\n"
                else:
                    notification_text += f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã Telegram\n"

                notification_text += f"\n–°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."

                await bot.send_message(user_id, notification_text, parse_mode="Markdown")

            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

            return True

        else:
            # –ù–µ—É–¥–∞—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
            await message.edit_text(
                f"‚ùå **–í–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
                f"üí∞ –°—É–º–º–∞: {amount}‚≠ê\n"
                f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transaction_id[:20]}...`\n\n"
                f"‚ùå Telegram API –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–æ–∑–≤—Ä–∞—Ç\n"
                f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞\n"
                f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è\n"
                f"‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π transaction_id\n"
                f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã Telegram\n\n"
                f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!",
                parse_mode="Markdown"
            )

            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∏–∑ –ë–î, –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—É—é
            if from_db:
                try:
                    await db_manager.cancel_subscription(transaction_id)
                    logging.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –≤ –ë–î, –Ω–æ –≤–æ–∑–≤—Ä–∞—Ç –Ω–µ —É–¥–∞–ª—Å—è: {transaction_id}")
                except Exception as db_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –ë–î: {db_error}")

            return False

    except Exception as refund_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ {transaction_id}: {refund_error}")

        await message.edit_text(
            f"üí• **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
            f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transaction_id[:20]}...`\n"
            f"‚ùå –û—à–∏–±–∫–∞: {refund_error}\n\n"
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!",
            parse_mode="Markdown"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        for admin_id in BotConfig.ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–û–ó–í–†–ê–¢–ê**\n\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {refund_error}\n"
                    f"üë§ User: {user_id}\n"
                    f"üìù Transaction: `{transaction_id}`\n"
                    f"üí∞ Amount: {amount}‚≠ê\n\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!",
                    parse_mode="Markdown"
                )
            except Exception:
                pass

        return False

    except Exception as refund_error:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ {transaction_id}: {refund_error}")

        await message.edit_text(
            f"üí• **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
            f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{transaction_id[:20]}...`\n"
            f"‚ùå –û—à–∏–±–∫–∞: {refund_error}\n\n"
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!",
            parse_mode="Markdown"
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
        for admin_id in BotConfig.ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–û–ó–í–†–ê–¢–ê**\n\n"
                    f"‚ùå –û—à–∏–±–∫–∞: {refund_error}\n"
                    f"üë§ User: {user_id}\n"
                    f"üìù Transaction: `{transaction_id}`\n"
                    f"üí∞ Amount: {amount}‚≠ê\n\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!",
                    parse_mode="Markdown"
                )
            except Exception:
                pass

        return False

# === –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("start"))
async def start_cmd(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫"""
    await state.clear()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    args = message.text.split()
    invited_by = None
    bonus_text = ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    user_exists = await db_manager.user_exists(user_id)

    if len(args) > 1:
        referral_code = args[1]

        if BotConfig.REFERRAL_SETTINGS["log_referral_attempts"]:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {referral_code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
        invited_by = await db_manager.get_user_by_referral_code(referral_code)

        if invited_by and invited_by != user_id:
            if BotConfig.REFERRAL_SETTINGS["log_referral_attempts"]:
                logging.info(f"–ù–∞–π–¥–µ–Ω –ø—Ä–∏–≥–ª–∞—à–∞—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {invited_by}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
            eligible, reason = await db_manager.is_eligible_for_referral_bonus(user_id)

            if eligible:
                if not user_exists:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
                    await db_manager.create_user(
                        user_id=user_id,
                        username=message.from_user.username,
                        first_name=message.from_user.first_name,
                        last_name=message.from_user.last_name,
                        invited_by=invited_by
                    )
                else:
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É, –Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await db_manager.apply_referral_bonus_to_existing_user(user_id, invited_by)

                bonus_text = BotConfig.REFERRAL_MESSAGES["bonus_activated"]

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ
                try:
                    inviter_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    notification_text = BotConfig.REFERRAL_MESSAGES["inviter_notification"].format(
                        inviter_name=inviter_name
                    )

                    await bot.send_message(
                        invited_by,
                        notification_text,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {invited_by}: {e}")

            else:
                if BotConfig.REFERRAL_SETTINGS["log_referral_attempts"]:
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å: {reason}")

                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bonus_text = BotConfig.REFERRAL_MESSAGES.get(reason, f"\n‚ùå {reason}")

        else:
            if invited_by == user_id:
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")
                bonus_text = BotConfig.REFERRAL_MESSAGES["own_link"]
            else:
                logging.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º: {referral_code}")
                bonus_text = BotConfig.REFERRAL_MESSAGES["invalid_link"]

    # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –±—ã–ª–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if not user_exists and not invited_by:
        await db_manager.create_user(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if user_exists:
        await db_manager.update_user_info(
            user_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )

    # –û—Ç–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ (–¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
    await db_manager.mark_user_as_active(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not await check_user_subscription(user_id):
        await send_subscription_request(message)
        return

    try:
        status = await db_manager.get_user_status(user_id)
        subscription_type = status["subscription_type"].title()

        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ–º–æ—â–Ω–∏–∫. –Ø –∏—Å–ø–æ–ª—å–∑—É—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n\n"
            "ü§ñ **–ß—Ç–æ —è —É–º–µ—é:**\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π\n\n"
            "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n"
            f"üíé –í–∞—à —Ç–∞—Ä–∏—Ñ: **{subscription_type}**"
            f"{bonus_text}",
            reply_markup=create_main_menu(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
            reply_markup=create_main_menu()
        )

@dp.callback_query(F.data == "check_subscription")
async def handle_check_subscription(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback_query.from_user.id

    if await check_user_subscription(user_id):
        await callback_query.message.delete()

        await callback_query.message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n\n"
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=create_main_menu(),
            parse_mode="Markdown"
        )
        await callback_query.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    else:
        await callback_query.answer(
            f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {BotConfig.CHANNEL_NAME}",
            show_alert=True
        )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ ===
@dp.message(F.text == "ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å")
async def handle_model_menu(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    data = await state.get_data()
    current_model = data.get("current_model", BotConfig.DEFAULT_MODEL)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status = await db_manager.get_user_status(message.from_user.id)
    is_premium = status["subscription_type"] == "premium"

    await message.answer(
        f"ü§ñ **–í—ã–±–æ—Ä AI –º–æ–¥–µ–ª–∏**\n\n"
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: **{BotConfig.MODEL_NAMES[current_model]}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=create_model_keyboard(current_model, is_premium),
        parse_mode="Markdown"
    )


@dp.message(F.text == "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã")
async def handle_limits_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ª–∏–º–∏—Ç–æ–≤"""
    user_id = message.from_user.id

    try:
        status = await db_manager.get_user_status(user_id)
        subscription_type = status["subscription_type"].title()
        username = status.get("username")
        display_name = f"@{username}" if username else f"ID: {user_id}"

        limits_text = f"üìä **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã** ({display_name})\n\n"
        limits_text += f"üíé –¢–∞—Ä–∏—Ñ: **{subscription_type}**\n"

        if status["subscription_expires"]:
            expires = datetime.fromisoformat(status["subscription_expires"])
            limits_text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y')}\n"

        if status["referral_bonus_expires"]:
            bonus_expires = datetime.fromisoformat(status["referral_bonus_expires"])
            limits_text += f"üéÅ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –¥–æ: {bonus_expires.strftime('%d.%m.%Y')}\n"

        limits_text += f"\nüìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n\n"

        limit_names = {
            "free_text_requests": "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–¥–µ–Ω—å)",
            "premium_text_requests": "üíé –ü—Ä–µ–º–∏—É–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ (–¥–µ–Ω—å)",
            "photo_analysis": "üñº –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–¥–µ–Ω—å)",
            "flux_generation": "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Flux (–Ω–µ–¥–µ–ª—è)",
            "midjourney_generation": "üé≠ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Midjourney"
        }

        for limit_type, limit_info in status["limits"].items():
            if limit_type in limit_names:
                name = limit_names[limit_type]
                used = limit_info["used"]
                limit = limit_info["limit"]
                remaining = limit_info["remaining"]
                period = limit_info["period_type"]

                if limit >= 999999:
                    limits_text += f"{name}: {used} (–±–µ–∑–ª–∏–º–∏—Ç)\n"
                else:
                    period_text = ""
                    if limit_type == "midjourney_generation":
                        period_text = f" ({period})"

                    percentage = (used / limit * 100) if limit > 0 else 0
                    bar = "üü©" * min(10, int(percentage / 10)) + "‚¨ú" * max(0, 10 - int(percentage / 10))
                    limits_text += f"{name}{period_text}: {used}/{limit}\n{bar}\n\n"

        if status["subscription_type"] == "free":
            limits_text += "\nüíé **–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π?**\n"
            limits_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üíé –ü–æ–¥–ø–∏—Å–∫–∞' –≤ –º–µ–Ω—é!"

        limits_text += f"\nüîÑ –õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00"

        await message.answer(limits_text, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤.")


@dp.message(F.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è")
async def handle_generation_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    await message.answer(
        "üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=create_generation_keyboard(),
        parse_mode="Markdown"
    )


@dp.message(F.text == "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã")
async def handle_referral_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    user_id = message.from_user.id

    try:
        referral_stats = await db_manager.get_referral_stats(user_id)
        referral_code = referral_stats["referral_code"]
        invited_count = referral_stats["invited_count"]

        bot_username = (await bot.get_me()).username
        referral_link = f"https://t.me/{bot_username}?start={referral_code}"

        referral_text = (
            "üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞**\n\n"
            f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
            f"`{referral_link}`\n\n"
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: **{invited_count}**\n\n"
            "üéÅ **–ë–æ–Ω—É—Å—ã –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:**\n"
            "‚Ä¢ –î—Ä—É–≥ –ø–æ–ª—É—á–∞–µ—Ç —É–¥–≤–æ–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ 1 –¥–µ–Ω—å\n"
            "‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –¥–µ–Ω—å –ø—Ä–µ–º–∏—É–º–∞\n\n"
            "üì§ –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!"
        )

        await message.answer(referral_text, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö.")


@dp.message(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
async def handle_subscription_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = message.from_user.id

    try:
        status = await db_manager.get_user_status(user_id)
        subscription_type = status["subscription_type"].title()

        subscription_text = f"üíé **–ü–æ–¥–ø–∏—Å–∫–∞**\n\n"
        subscription_text += f"–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: **{subscription_type}**\n"

        if status["subscription_expires"]:
            expires = datetime.fromisoformat(status["subscription_expires"])
            subscription_text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y %H:%M')}\n"

        subscription_text += "\nüöÄ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:**\n"
        subscription_text += "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—è–º (Gemini, Gemma, Kimi)\n"
        subscription_text += "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
        subscription_text += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"

        if status["subscription_type"] == "free":
            subscription_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:"

            await message.answer(
                subscription_text,
                reply_markup=create_subscription_plans_keyboard(),
                parse_mode="Markdown"
            )
        else:
            subscription_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Premium! üôè"
            await message.answer(subscription_text, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.")


@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_help_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    help_text = (
        "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**\n\n"
        "ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ã–µ AI –º–æ–¥–µ–ª–∏:**\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ: GPT-4o Mini, Mistral, DeepSeek\n"
        "‚Ä¢ –ü—Ä–µ–º–∏—É–º: Gemini Pro 2.5, Gemma 3, Kimi Dev\n\n"
        "üìù **–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ —Å –∫–∞—Ä—Ç–∏–Ω–æ–∫\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Flux, Midjourney)\n"
        "‚Ä¢ –ü–æ–º–æ–≥–∞—Ç—å —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π\n"
        "‚Ä¢ –û–±—ä—è—Å–Ω—è—Ç—å —Å—Ö–µ–º—ã, –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã\n\n"
        "üí¨ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        "‚Ä¢ –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è'\n\n"
        "üîó **–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ /new - –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (–æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)\n"
        "‚Ä¢ /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
        "‚ùì –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    await message.answer(help_text, parse_mode="Markdown")


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK QUERIES ===
@dp.callback_query(F.data.startswith("model_"))
async def handle_model_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    model_key = callback_query.data.split("_", 1)[1]
    user_id = callback_query.from_user.id

    if model_key not in BotConfig.MODELS:
        await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å", show_alert=True)
        return

    model_info = BotConfig.MODELS[model_key]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏
    if model_info["is_premium"]:
        status = await db_manager.get_user_status(user_id)
        if status["subscription_type"] != "premium":
            await callback_query.answer(
                "üîí –≠—Ç–∞ –º–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å Premium –ø–æ–¥–ø–∏—Å–∫–æ–π!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ü–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
                show_alert=True
            )
            return

    await state.update_data(current_model=model_key)
    model_name = BotConfig.MODEL_NAMES[model_key]

    # –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if model_info["model_type"] == "image":
        if model_key == "flux":
            await state.update_data(waiting_for_flux_prompt=True)
            await callback_query.message.edit_text(
                f"üé® **–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}**\n\n"
                f"‚ú® –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n\n"
                f"üí° **–°–æ–≤–µ—Ç—ã:**\n"
                f"‚Ä¢ –û–ø–∏—Å—ã–≤–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ (—Å—Ç–∏–ª—å, —Ü–≤–µ—Ç–∞, –∫–æ–º–ø–æ–∑–∏—Ü–∏—é)\n"
                f"‚Ä¢ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥—É\n"
                f"‚Ä¢ –ü—Ä–∏–º–µ—Ä: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –Ω–µ–æ–Ω–æ–≤—ã–µ –æ–≥–Ω–∏, —Ç–µ–º–Ω–æ–µ –Ω–µ–±–æ'\n\n"
                f"üìä **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:**\n"
                f"üé® Flux: –Ω–µ–¥–µ–ª—å–Ω—ã–π –ª–∏–º–∏—Ç",
                parse_mode="Markdown"
            )
        elif model_key == "midjourney":
            await state.update_data(waiting_for_mj_prompt=True)
            await callback_query.message.edit_text(
                f"üé≠ **–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}**\n\n"
                f"‚ú® –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å.\n\n"
                f"üí° **–°–æ–≤–µ—Ç—ã –¥–ª—è Midjourney:**\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
                f"‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∏–ª—å (—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º, –∞—Ä—Ç, –∞–Ω–∏–º–µ –∏ —Ç.–¥.)\n"
                f"‚Ä¢ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–µ–¥—É\n"
                f"‚Ä¢ –ü—Ä–∏–º–µ—Ä: '–ü–æ—Ä—Ç—Ä–µ—Ç –¥–µ–≤—É—à–∫–∏ –≤ —Å—Ç–∏–ª–µ —Ä–µ–Ω–µ—Å—Å–∞–Ω—Å, –º–∞—Å–ª—è–Ω–∞—è –∂–∏–≤–æ–ø–∏—Å—å'\n\n"
                f"üìä **–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:**\n"
                f"üé≠ Midjourney: {'–¥–Ω–µ–≤–Ω–æ–π' if model_info['is_premium'] else '–Ω–µ–¥–µ–ª—å–Ω—ã–π'} –ª–∏–º–∏—Ç",
                parse_mode="Markdown"
            )
    else:
        # –û–±—ã—á–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
        await callback_query.message.edit_text(
            f"‚úÖ **–ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞**\n\n"
            f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: **{model_name}**\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞—à–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é.\n"
            f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            parse_mode="Markdown"
        )

    await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {model_name}")


@dp.callback_query(F.data.startswith("gen_"))
async def handle_generation_callback(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    generation_type = callback_query.data.split("_", 1)[1]

    if generation_type == "flux":
        await state.update_data(waiting_for_flux_prompt=True)
        await callback_query.message.edit_text(
            "üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Flux**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:",
            parse_mode="Markdown"
        )
    elif generation_type == "midjourney":
        await state.update_data(waiting_for_mj_prompt=True)
        await callback_query.message.edit_text(
            "üé≠ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Midjourney**\n\n"
            "–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:",
            parse_mode="Markdown"
        )

    await callback_query.answer()


@dp.callback_query(F.data.startswith("buy_"))
async def handle_subscription_purchase(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram Stars"""
    subscription_type = callback_query.data.split("_", 1)[1]
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if subscription_type not in BotConfig.SUBSCRIPTION_PRICES:
        await callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return

    amount = BotConfig.SUBSCRIPTION_PRICES[subscription_type]

    prices = {
        "week_trial": "1‚≠ê (–ø—Ä–æ–±–Ω–∞—è –Ω–µ–¥–µ–ª—è)",
        "month": "555‚≠ê (–º–µ—Å—è—Ü)",
        "3months": "1111‚≠ê (3 –º–µ—Å—è—Ü–∞)"
    }

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
    try:
        title = f"Premium –ø–æ–¥–ø–∏—Å–∫–∞ - {prices.get(subscription_type, '–ü–ª–∞–Ω')}"
        description = f"Premium –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {subscription_type.replace('_', ' ')}"

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô PAYLOAD - –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ user_id
        payload = f"premium_{subscription_type}_{user_id}"

        logging.info(f"–°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å: payload='{payload}', amount={amount}, user_id={user_id}")

        # –°–æ–∑–¥–∞–µ–º LabeledPrice –¥–ª—è Telegram Stars
        labeled_price = LabeledPrice(label=title, amount=amount)

        await bot.send_invoice(
            chat_id=user_id,
            title=title,
            description=description,
            payload=payload,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π payload
            provider_token="",  # –ü—É—Å—Ç–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è Telegram Stars
            currency="XTR",  # –í–∞–ª—é—Ç–∞ –¥–ª—è Telegram Stars
            prices=[labeled_price],
            start_parameter=f"premium_{subscription_type}"
        )

        await callback_query.message.edit_text(
            f"üí≥ **–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram Stars**\n\n"
            f"–í—ã–±—Ä–∞–Ω –ø–ª–∞–Ω: **{prices.get(subscription_type, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}**\n\n"
            f"üöÄ **–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ Premium:**\n"
            f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—è–º (Gemini, Gemma, Kimi)\n"
            f"‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
            f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
            f"‚≠ê –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Telegram Stars\n"
            f"–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
            parse_mode="Markdown"
        )

        await callback_query.answer("–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        logging.info(f"–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription_type}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@dp.pre_checkout_query()
async def handle_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ pre-checkout –∑–∞–ø—Ä–æ—Å–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å payload
    payload = pre_checkout_query.invoice_payload
    if payload.startswith("premium_"):
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    else:
        await bot.answer_pre_checkout_query(
            pre_checkout_query.id,
            ok=False,
            error_message="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂"
        )


@dp.message(F.successful_payment)
async def handle_successful_payment(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment = message.successful_payment
    payload = payment.invoice_payload
    transaction_id = payment.telegram_payment_charge_id

    # –õ–û–ì–ò–†–£–ï–ú –î–ï–¢–ê–õ–ò –ü–õ–ê–¢–ï–ñ–ê
    logging.info(f"=== –£–°–ü–ï–®–ù–´–ô –ü–õ–ê–¢–ï–ñ ===")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} (@{message.from_user.username})")
    logging.info(f"Payload: {payload}")
    logging.info(f"–°—É–º–º–∞: {payment.total_amount} {payment.currency}")
    logging.info(f"Telegram Payment Charge ID: {transaction_id}")
    logging.info(f"Provider Payment Charge ID: {payment.provider_payment_charge_id}")
    logging.info(f"=======================")

    user_id = message.from_user.id
    refund_attempted = False

    try:
        # –ü–∞—Ä—Å–∏–º payload
        if not payload.startswith("premium_"):
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload: {payload}")

        payload_parts = payload[8:]  # —É–±–∏—Ä–∞–µ–º "premium_"
        last_underscore = payload_parts.rfind('_')
        if last_underscore == -1:
            raise ValueError(f"–ù–µ –Ω–∞–π–¥–µ–Ω user_id –≤ payload: {payload}")

        subscription_type = payload_parts[:last_underscore]
        user_id_str = payload_parts[last_underscore + 1:]

        try:
            parsed_user_id = int(user_id_str)
        except ValueError:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π user_id –≤ payload: {user_id_str}")

        if parsed_user_id != user_id:
            logging.warning(f"User ID –≤ payload ({parsed_user_id}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º ({user_id})")

        logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ payload: subscription_type='{subscription_type}', user_id={user_id}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        days_map = {
            "week_trial": 7,
            "week": 7,
            "trial": 7,
            "month": 30,
            "3months": 90
        }

        days = days_map.get(subscription_type, 30)
        logging.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ '{subscription_type}' –Ω–∞ {days} –¥–Ω–µ–π")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
        payment_saved = await db_manager.create_payment(
            user_id=user_id,
            payment_id=f"pay_{user_id}_{int(datetime.now().timestamp())}",
            amount=payment.total_amount,
            subscription_type=subscription_type,
            telegram_payment_charge_id=transaction_id
        )

        if not payment_saved:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–Ω—å–≥–∏
            logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ {transaction_id} –≤ –ë–î!")
            await attempt_refund(user_id, transaction_id, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            refund_attempted = True
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        confirmed_payment = await db_manager.confirm_payment(telegram_payment_charge_id=transaction_id)

        if not confirmed_payment:
            logging.error(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂ {transaction_id}!")
            await attempt_refund(user_id, transaction_id, "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
            refund_attempted = True
            return

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        try:
            await db_manager.set_subscription(user_id, "premium", days, transaction_id)
        except Exception as subscription_error:
            logging.error(
                f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è {transaction_id}: {subscription_error}")
            await attempt_refund(user_id, transaction_id, "–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
            refund_attempted = True
            return

        # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await message.answer(
            f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
            f"üíé Premium –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π\n"
            f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
            f"üìù –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id[:20]}...`\n"
            f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
            parse_mode="Markdown",
            message_effect_id="5104841245755180586"
        )

        logging.info(
            f"–ü–õ–ê–¢–ï–ñ –£–°–ü–ï–®–ù–û –û–ë–†–ê–ë–û–¢–ê–ù: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –ø–æ–¥–ø–∏—Å–∫–∞ '{subscription_type}' –Ω–∞ {days} –¥–Ω–µ–π, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id}")

    except ValueError as ve:
        logging.error(f"–û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê PAYLOAD: {ve}")
        if not refund_attempted:
            await attempt_refund(user_id, transaction_id, f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {ve}")

    except Exception as e:
        logging.error(f"–û–ë–©–ê–Ø –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ü–õ–ê–¢–ï–ñ–ê: {e}")
        if not refund_attempted:
            await attempt_refund(user_id, transaction_id, f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")


async def attempt_refund(user_id: int, transaction_id: str, reason: str):
    """–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ Telegram Stars"""
    try:
        logging.info(f"–ü–û–ü–´–¢–ö–ê –í–û–ó–í–†–ê–¢–ê: user_id={user_id}, transaction_id={transaction_id}, reason={reason}")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ Telegram API
        refund_result = await bot.refund_star_payment(
            user_id=user_id,
            telegram_payment_charge_id=transaction_id
        )

        if refund_result:
            logging.info(f"–í–û–ó–í–†–ê–¢ –£–°–ü–ï–®–ï–ù: {transaction_id}")

            # –û—Ç–º–µ—á–∞–µ–º –≤ –ë–î —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω
            try:
                await db_manager.mark_payment_refunded(transaction_id, reason)
            except Exception as db_error:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –≤ –ë–î: {db_error}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                await bot.send_message(
                    user_id,
                    f"üí∞ **–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤**\n\n"
                    f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
                    f"–°—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç Telegram Stars.\n\n"
                    f"üìù –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id[:20]}...`\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode="Markdown"
                )
            except Exception as notify_error:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ: {notify_error}")
        else:
            logging.error(f"–í–û–ó–í–†–ê–¢ –ù–ï –£–î–ê–õ–°–Ø: {transaction_id}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–µ
            for admin_id in BotConfig.ADMIN_IDS:
                try:
                    await bot.send_message(
                        admin_id,
                        f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê**\n\n"
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!\n"
                        f"üë§ User ID: {user_id}\n"
                        f"üí≥ Transaction: `{transaction_id}`\n"
                        f"‚ùå –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
                        f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–π –≤–æ–∑–≤—Ä–∞—Ç!",
                        parse_mode="Markdown"
                    )
                except Exception:
                    pass

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–±–ª–µ–º–µ
            try:
                await bot.send_message(
                    user_id,
                    f"‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞**\n\n"
                    f"–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n"
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ —É–¥–∞–ª—Å—è.\n\n"
                    f"üìù –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: `{transaction_id[:20]}...`\n"
                    f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.",
                    parse_mode="Markdown"
                )
            except Exception:
                pass

    except Exception as refund_error:
        logging.error(f"–û–®–ò–ë–ö–ê –ü–†–ò –í–û–ó–í–†–ê–¢–ï: {refund_error}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in BotConfig.ADMIN_IDS:
            try:
                await bot.send_message(
                    admin_id,
                    f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–û–ó–í–†–ê–¢–ê**\n\n"
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤!\n"
                    f"üë§ User ID: {user_id}\n"
                    f"üí≥ Transaction: `{transaction_id}`\n"
                    f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {refund_error}\n"
                    f"‚ùå –ü—Ä–∏—á–∏–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞: {reason}\n\n"
                    f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–æ–µ —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!",
                    parse_mode="Markdown"
                )
            except Exception:
                pass

@dp.callback_query(F.data == "back_subscription")
async def handle_back_to_subscription(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback_query.from_user.id

    try:
        status = await db_manager.get_user_status(user_id)
        subscription_type = status["subscription_type"].title()

        subscription_text = f"üíé **–ü–æ–¥–ø–∏—Å–∫–∞**\n\n"
        subscription_text += f"–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ: **{subscription_type}**\n"

        if status["subscription_expires"]:
            expires = datetime.fromisoformat(status["subscription_expires"])
            subscription_text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y %H:%M')}\n"

        subscription_text += "\nüöÄ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Premium:**\n"
        subscription_text += "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª—è–º (Gemini, Gemma, Kimi)\n"
        subscription_text += "‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
        subscription_text += "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"

        if status["subscription_type"] == "free":
            subscription_text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:"

            await callback_query.message.edit_text(
                subscription_text,
                reply_markup=create_subscription_plans_keyboard(),
                parse_mode="Markdown"
            )
        else:
            subscription_text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Premium! üôè"
            await callback_query.message.edit_text(subscription_text, parse_mode="Markdown")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@dp.callback_query(F.data == "back_main")
async def handle_back_to_main(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback_query.message.delete()
    await callback_query.answer()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–î–ò–ê ===
@dp.message(F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    limit_check = await db_manager.check_limit(user_id, "photo_analysis")

    if not limit_check["allowed"]:
        await message.answer(
            f"‚ùå **–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω**\n\n"
            f"üñº –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {limit_check['used']}/{limit_check['limit']}\n"
            f"üíé –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ü–æ–¥–ø–∏—Å–∫–∞'",
            parse_mode="Markdown"
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç
    if not await db_manager.use_limit(user_id, "photo_analysis"):
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    remaining = limit_check["remaining"] - 1
    processing_text = f"üñº –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ... (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{limit_check['limit']})"
    processing_msg = await message.answer(processing_text)

    try:
        photo = message.photo[-1]
        base64_image, mime_type = await download_image_as_base64(photo.file_id)

        data = await state.get_data()
        history = data.get("history", [])
        current_model = data.get("current_model", BotConfig.DEFAULT_MODEL)

        if not history:
            history.append(get_system_message())

        user_message = {
            "role": "user",
            "content": [
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:{mime_type};base64,{base64_image}",
                        "detail": "high"
                    }
                }
            ]
        }

        if message.caption:
            user_message["content"].append({"type": "text", "text": message.caption})
        else:
            user_message["content"].append({
                "type": "text",
                "text": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ. –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–¥–∞—á–∞ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç - –ø—Ä–æ—á–∏—Ç–∞–π –∏ —Ä–µ—à–∏."
            })

        history.append(user_message)

        if len(history) > MAX_HISTORY * 2 + 1:
            system_msg = history[0] if history[0]["role"] == "system" else None
            recent_history = history[-(MAX_HISTORY * 2):]
            if system_msg:
                history = [system_msg] + recent_history
            else:
                history = recent_history

        response_text = await process_message_with_ai(history, processing_msg, current_model)

        history.append({"role": "assistant", "content": response_text})
        await state.update_data(history=history)

        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except Exception:
            pass

        model_name = BotConfig.MODEL_NAMES[current_model]
        status = await db_manager.get_user_status(user_id)
        remaining_now = status["limits"]["photo_analysis"]["remaining"]

        full_response = f"ü§ñ {model_name}\nüìä –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {remaining_now}/{limit_check['limit']}\n\n" + clean_markdown_for_telegram(
            response_text)
        await send_long_message(message, full_response)

    except Exception as e:
        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except Exception:
            pass

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
            f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )


# –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–∞
@dp.message(F.voice)
async def handle_voice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º)"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
    status = await db_manager.get_user_status(user_id)
    if status["subscription_type"] != "premium":
        await message.answer(
            "üé§ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
            "üîí –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!\n\n"
            "üíé **–° Premium –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**\n"
            "‚Ä¢ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç–µ\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ AI\n"
            "‚Ä¢ –î–æ 20 –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ü–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode="Markdown"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    limit_check = await db_manager.check_limit(user_id, "voice_processing")

    if not limit_check["allowed"]:
        await message.answer(
            f"‚ùå **–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω**\n\n"
            f"üé§ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞: {limit_check['used']}/{limit_check['limit']}\n"
            f"‚è∞ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00",
            parse_mode="Markdown"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.voice.duration > 60:  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
        await message.answer(
            "‚ùå **–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n"
            "üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 60 —Å–µ–∫—É–Ω–¥\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {message.voice.duration} —Å–µ–∫\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if message.voice.file_size > 10 * 1024 * 1024:  # 10MB
        await message.answer(
            "‚ùå **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π**\n\n"
            f"üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB\n"
            f"üìä –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {message.voice.file_size / (1024 * 1024):.1f}MB\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç
    if not await db_manager.use_limit(user_id, "voice_processing"):
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    remaining = limit_check["remaining"] - 1
    processing_msg = await message.answer(
        f"üé§ –°–∫–∞—á–∏–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ... (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{limit_check['limit']})"
    )

    wav_file_path = None
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        wav_file_path = await download_voice_as_wav(message.voice.file_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        try:
            await bot.edit_message_text(
                f"üß† –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å... (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{limit_check['limit']})",
                chat_id=processing_msg.chat.id,
                message_id=processing_msg.message_id
            )
        except Exception:
            pass

        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
        transcribed_text = await transcribe_audio(wav_file_path)
        wav_file_path = None  # –§–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω –≤ transcribe_audio

        if transcribed_text == "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å":
            try:
                await bot.edit_message_text(
                    "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å**\n\n"
                    "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ –∏ –º–µ–¥–ª–µ–Ω–Ω–æ\n"
                    "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ –±–µ–∑ —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞\n"
                    "‚Ä¢ –î–µ—Ä–∂–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –±–ª–∏–∂–µ –∫ –ª–∏—Ü—É\n"
                    "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
                    "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º",
                    chat_id=processing_msg.chat.id,
                    message_id=processing_msg.message_id,
                    parse_mode="Markdown"
                )
            except Exception:
                await message.answer(
                    "‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å**\n\n"
                    "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º.",
                    parse_mode="Markdown"
                )
            return

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        try:
            await bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
        except Exception:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        confirmation_msg = await message.answer(
            f"üé§ **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è —Ä–µ—á—å:**\n\n"
            f"üìù _{transcribed_text}_\n\n"
            f"ü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
            parse_mode="Markdown"
        )

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
        from types import SimpleNamespace

        # –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        temp_message = SimpleNamespace()
        temp_message.text = transcribed_text
        temp_message.from_user = message.from_user
        temp_message.chat = message.chat
        temp_message.message_id = message.message_id
        temp_message.date = message.date

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ answer –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        temp_message.answer = message.answer

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
        try:
            await bot.delete_message(confirmation_msg.chat.id, confirmation_msg.message_id)
        except Exception:
            pass

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_text(temp_message, state)

    except Exception as e:
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if wav_file_path and os.path.exists(wav_file_path):
            try:
                os.unlink(wav_file_path)
            except Exception:
                pass

        try:
            await bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
        except Exception:
            pass

        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        error_msg = "‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è**\n\n"

        if "codec can't decode" in str(e) or "invalid start byte" in str(e):
            error_msg += (
                "üîß **–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞**\n\n"
                "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–∞–ø–∏—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
                "‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram\n"
                "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º"
            )
        elif "FFmpeg" in str(e):
            error_msg += (
                "üîß **–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –∞—É–¥–∏–æ**\n\n"
                "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—á–µ\n"
                "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –≤ –±–æ–ª–µ–µ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ\n"
                "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º"
            )
        elif "—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π" in str(e) or "25MB" in str(e):
            error_msg += (
                "üìè **–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏**\n\n"
                "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚Ä¢ –†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏\n"
                "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º"
            )
        else:
            error_msg += (
                "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–∏\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è –≤ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
                "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–º\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"
            )

        await message.answer(error_msg, parse_mode="Markdown")

@dp.message(F.document)
async def handle_document(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    document = message.document
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if document.mime_type and document.mime_type.startswith('image/'):
        await handle_photo(message, state)
        return

    # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–º–∏—É–º
    status = await db_manager.get_user_status(user_id)
    if status["subscription_type"] != "premium":
        await message.answer(
            "üìÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤**\n\n"
            "üîí –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Premium –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤!\n\n"
            "üíé **–° Premium –≤—ã —Å–º–æ–∂–µ—Ç–µ:**\n"
            "‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å PDF, DOCX, TXT —Ñ–∞–π–ª—ã\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—Å—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
            "‚Ä¢ –î–æ 15 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–µ–Ω—å\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ü–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
            parse_mode="Markdown"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å 20MB)
    if document.file_size > 20 * 1024 * 1024:
        await message.answer(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!\n"
            "üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB\n"
            f"üìä –†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {document.file_size / (1024 * 1024):.1f}MB"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    supported_types = {
        'application/pdf': 'PDF',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'DOCX',
        'text/plain': 'TXT'
    }

    if document.mime_type not in supported_types:
        await message.answer(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞!\n\n"
            "üìÑ **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**\n"
            "‚Ä¢ PDF (.pdf)\n"
            "‚Ä¢ Word –¥–æ–∫—É–º–µ–Ω—Ç—ã (.docx)\n"
            "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)\n\n"
            "üñº –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏—Ö –∫–∞–∫ —Ñ–æ—Ç–æ."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    limit_check = await db_manager.check_limit(user_id, "document_processing")

    if not limit_check["allowed"]:
        await message.answer(
            f"‚ùå **–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω**\n\n"
            f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {limit_check['used']}/{limit_check['limit']}\n"
            f"‚è∞ –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 00:00",
            parse_mode="Markdown"
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç
    if not await db_manager.use_limit(user_id, "document_processing"):
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    remaining = limit_check["remaining"] - 1
    file_type = supported_types[document.mime_type]
    processing_msg = await message.answer(
        f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {file_type} –¥–æ–∫—É–º–µ–Ω—Ç... (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining}/{limit_check['limit']})"
    )

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        file_data, file_path = await download_document(document.file_id)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if document.mime_type == 'application/pdf':
            extracted_text = extract_text_from_pdf(file_data)
        elif document.mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
            extracted_text = extract_text_from_docx(file_data)
        elif document.mime_type == 'text/plain':
            extracted_text = extract_text_from_txt(file_data)
        else:
            raise Exception("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")

        if not extracted_text.strip():
            await bot.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
                "üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç –ø—É—Å—Ç–æ–π\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ–≤—Ä–µ–∂–¥–µ–Ω",
                chat_id=processing_msg.chat.id,
                message_id=processing_msg.message_id
            )
            return

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if len(extracted_text) > 10000:
            extracted_text = extracted_text[:10000] + "\n\n[–¢–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞...]"

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        try:
            await bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
        except:
            pass

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        data = await state.get_data()
        history = data.get("history", [])
        current_model = data.get("current_model", BotConfig.DEFAULT_MODEL)

        if not history:
            history.append(get_system_message())

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ AI
        user_query = message.caption if message.caption else "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏"

        document_prompt = f"""–î–æ–∫—É–º–µ–Ω—Ç '{document.file_name}' ({file_type}):

{extracted_text}

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {user_query}"""

        history.append({"role": "user", "content": document_prompt})

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º AI
        processing_ai_msg = await message.answer("ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")

        response_text = await process_message_with_ai(history, processing_ai_msg, current_model)

        history.append({"role": "assistant", "content": response_text})
        await state.update_data(history=history)

        try:
            await bot.delete_message(processing_ai_msg.chat.id, processing_ai_msg.message_id)
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        model_name = BotConfig.MODEL_NAMES[current_model]
        full_response = f"üìÑ **–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞** ({file_type})\nü§ñ {model_name}\nüìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {remaining}/{limit_check['limit']}\n\n" + clean_markdown_for_telegram(
            response_text)
        await send_long_message(message, full_response)

    except Exception as e:
        try:
            await bot.delete_message(processing_msg.chat.id, processing_msg.message_id)
        except:
            pass

        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞\n"
            f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞\n"
            f"‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç"
        )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–°–¢–ê ===
@dp.message(F.text & ~F.text.startswith('/') & ~F.text.in_([
    "ü§ñ –í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å", "üìä –ú–æ–∏ –ª–∏–º–∏—Ç—ã", "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è",
    "üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", "üíé –ü–æ–¥–ø–∏—Å–∫–∞", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
]))
async def handle_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    user_text = message.text
    user_id = message.from_user.id
    data = await state.get_data()
    await db_manager.mark_user_as_active(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if data.get("waiting_for_flux_prompt"):
        await state.update_data(waiting_for_flux_prompt=False)
        await handle_flux_generation(message, user_text)
        return

    if data.get("waiting_for_mj_prompt"):
        await state.update_data(waiting_for_mj_prompt=False)
        await handle_midjourney_generation(message, user_text)
        return

    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {user_text[:50]}...")

    current_model = data.get("current_model", BotConfig.DEFAULT_MODEL)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
    model_info = BotConfig.MODELS.get(current_model, BotConfig.MODELS[BotConfig.DEFAULT_MODEL])

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if model_info["model_type"] == "image":
        if current_model == "flux":
            await state.update_data(waiting_for_flux_prompt=True)
            await message.answer(
                f"üé® **–£ –≤–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å Flux –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
                f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...",
                parse_mode="Markdown"
            )
            await handle_flux_generation(message, user_text)
        elif current_model == "midjourney":
            await state.update_data(waiting_for_mj_prompt=True)
            await message.answer(
                f"üé≠ **–£ –≤–∞—Å –≤—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å Midjourney –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
                f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...",
                parse_mode="Markdown"
            )
            await handle_midjourney_generation(message, user_text)
        return

    # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    limit_type = get_limit_type_for_model(current_model)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    limit_check = await db_manager.check_limit(user_id, limit_type)
    if not limit_check["allowed"]:
        if model_info["is_premium"]:
            limit_text = "üíé –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏"
        else:
            limit_text = "üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏"

        await message.answer(
            f"‚ùå **–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω**\n\n"
            f"{limit_text}: {limit_check['used']}/{limit_check['limit']}\n"
            f"üíé –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ü–æ–¥–ø–∏—Å–∫–∞'",
            parse_mode="Markdown"
        )
        return

    processing_msg = await message.answer("üß† –ü–æ–º–æ—â–Ω–∏–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    try:
        history = data.get("history", [])

        if not history:
            history.append(get_system_message())

        history.append({"role": "user", "content": user_text})

        if len(history) > MAX_HISTORY * 2 + 1:
            system_msg = history[0] if history[0]["role"] == "system" else None
            recent_history = history[-(MAX_HISTORY * 2):]
            if system_msg:
                history = [system_msg] + recent_history
            else:
                history = recent_history

        response_text = await process_message_with_ai(history, processing_msg, current_model)

        history.append({"role": "assistant", "content": response_text})
        await state.update_data(history=history)

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç
        await db_manager.use_limit(user_id, limit_type)

        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except Exception:
            pass

        model_name = BotConfig.MODEL_NAMES[current_model]
        #full_response = f"ü§ñ {model_name}\n\n" + clean_markdown_for_telegram(response_text)
        full_response = clean_markdown_for_telegram(response_text)
        await send_long_message(message, full_response )

    except Exception as e:
        try:
            await bot.delete_message(message.chat.id, processing_msg.message_id)
        except Exception:
            pass

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ AI: {e}")
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI\n"
            f"üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:\n"
            f"‚Ä¢ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ\n"
            f"‚Ä¢ –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"
        )


async def handle_flux_generation(message: types.Message, prompt: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Flux"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    limit_check = await db_manager.check_limit(user_id, "flux_generation")

    if not limit_check["allowed"]:
        await message.answer(
            f"‚ùå **–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω**\n\n"
            f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Flux: {limit_check['used']}/{limit_check['limit']} (–Ω–µ–¥–µ–ª—è)\n"
            f"üíé –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ü–æ–¥–ø–∏—Å–∫–∞'",
            parse_mode="Markdown"
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç
    if not await db_manager.use_limit(user_id, "flux_generation"):
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    translation_msg = await message.answer("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")

    try:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç
        english_prompt, was_translated = await translate_with_ai(prompt)

        await bot.edit_message_text(
            f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n"
            f"{'üåç –ü—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω —Å –ø–æ–º–æ—â—å—é AI' if was_translated else '‚úÖ –ü—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º'}",
            chat_id=translation_msg.chat.id,
            message_id=translation_msg.message_id
        )

        await bot.send_chat_action(message.chat.id, "upload_photo")

        url, final_prompt, _ = await generate_image(prompt, "flux")

        status = await db_manager.get_user_status(user_id)
        remaining = status["limits"]["flux_generation"]["remaining"]
        limit_total = status["limits"]["flux_generation"]["limit"]

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        try:
            await bot.delete_message(translation_msg.chat.id, translation_msg.message_id)
        except:
            pass

        caption = f"üñº **Flux –≥–µ–Ω–µ—Ä–∞—Ü–∏—è**\n\n"
        if was_translated:
            caption += f"üìù –í–∞—à –∑–∞–ø—Ä–æ—Å: `{prompt}`\n"
            caption += f"üåç AI –ø–µ—Ä–µ–≤–æ–¥: `{final_prompt}`\n\n"
        else:
            caption += f"üìù –ü—Ä–æ–º–ø—Ç: `{prompt}`\n\n"

        caption += f"üé® Flux: {remaining}/{limit_total} –æ—Å—Ç–∞–ª–æ—Å—å (–Ω–µ–¥–µ–ª—è)"

        await message.answer_photo(url, caption=caption, parse_mode="Markdown")

    except Exception as e:
        try:
            await bot.delete_message(translation_msg.chat.id, translation_msg.message_id)
        except:
            pass
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Flux: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–º–ø—Ç.")


async def handle_midjourney_generation(message: types.Message, prompt: str):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Midjourney"""
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    limit_check = await db_manager.check_limit(user_id, "midjourney_generation")

    if not limit_check["allowed"]:
        period_text = "–¥–µ–Ω—å" if limit_check["period_type"] == "daily" else "–Ω–µ–¥–µ–ª—è"
        await message.answer(
            f"‚ùå **–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω**\n\n"
            f"üé≠ Midjourney: {limit_check['used']}/{limit_check['limit']} ({period_text})\n"
            f"üíé –î–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ü–æ–¥–ø–∏—Å–∫–∞'",
            parse_mode="Markdown"
        )
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏–º–∏—Ç
    if not await db_manager.use_limit(user_id, "midjourney_generation"):
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    translation_msg = await message.answer("üîÑ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ–º–ø—Ç –¥–ª—è Midjourney...")

    try:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç
        english_prompt, was_translated = await translate_with_ai(prompt)

        await bot.edit_message_text(
            f"üé≠ Midjourney –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n"
            f"{'üåç –ü—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω —Å –ø–æ–º–æ—â—å—é AI' if was_translated else '‚úÖ –ü—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º'}\n\n"
            f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥...",
            chat_id=translation_msg.chat.id,
            message_id=translation_msg.message_id
        )

        url, final_prompt, _ = await generate_image(prompt, "midjourney-6.0")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        try:
            await bot.delete_message(translation_msg.chat.id, translation_msg.message_id)
        except:
            pass

        status = await db_manager.get_user_status(user_id)
        remaining = status["limits"]["midjourney_generation"]["remaining"]
        limit_total = status["limits"]["midjourney_generation"]["limit"]
        period_text = "–¥–µ–Ω—å" if status["limits"]["midjourney_generation"]["period_type"] == "daily" else "–Ω–µ–¥–µ–ª—è"

        caption = f"üñº **Midjourney 6.0 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è**\n\n"
        if was_translated:
            caption += f"üìù –í–∞—à –∑–∞–ø—Ä–æ—Å: `{prompt}`\n"
            caption += f"üåç AI –ø–µ—Ä–µ–≤–æ–¥: `{final_prompt}`\n\n"
        else:
            caption += f"üìù –ü—Ä–æ–º–ø—Ç: `{prompt}`\n\n"

        caption += f"üé≠ MJ: {remaining}/{limit_total} –æ—Å—Ç–∞–ª–æ—Å—å ({period_text})"

        await message.answer_photo(url, caption=caption, parse_mode="Markdown")

    except Exception as e:
        try:
            await bot.delete_message(translation_msg.chat.id, translation_msg.message_id)
        except:
            pass
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Midjourney: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø—Ä–æ–º–ø—Ç.")


# === –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("new"))
async def new_chat_cmd(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    data = await state.get_data()
    current_model = data.get("current_model", BotConfig.DEFAULT_MODEL)

    await state.clear()
    await state.update_data(current_model=current_model)

    model_name = BotConfig.MODEL_NAMES[current_model]
    await message.answer(
        f"üÜï –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç!\n"
        f"ü§ñ –ú–æ–¥–µ–ª—å: **{model_name}**\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!",
        parse_mode="Markdown"
    )


# === –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ===
@dp.message(Command("admin"))
async def admin_cmd(message: types.Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å"""
    if message.from_user.id not in BotConfig.ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    await message.answer(
        "üîß –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /admin_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ /admin_user [user_id/@username] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "‚Ä¢ /admin_premium [user_id/@username] [days] - –í—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º\n"
        "‚Ä¢ /admin_reset [user_id/@username] - –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "‚Ä¢ /admin_broadcast [—Ç–µ–∫—Å—Ç] - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "‚Ä¢ /admin_cancel [—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è] - –û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã\n\n"
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–∞–∫ –∏ @username",
    )


@dp.message(Command("admin_stats"))
async def admin_stats_cmd(message: types.Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    if message.from_user.id not in BotConfig.ADMIN_IDS:
        return

    try:
        stats = await db_manager.get_bot_statistics()

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ —á–∏—Å–ª–∞
        def safe_format(value):
            return str(value) if value is not None else "0"

        stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{safe_format(stats.get('total_users', 0))}*\n"
        stats_text += f"üíé Premium –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{safe_format(stats.get('premium_users', 0))}*\n"
        stats_text += f"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{safe_format(stats.get('free_users', 0))}*\n\n"

        stats_text += f"üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        stats_text += f"üÜï –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{safe_format(stats.get('new_users_today', 0))}*\n"
        stats_text += f"üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: *{safe_format(stats.get('text_requests_today', 0))}*\n"
        stats_text += f"üñº –ê–Ω–∞–ª–∏–∑–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: *{safe_format(stats.get('image_analysis_today', 0))}*\n"
        stats_text += f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: *{safe_format(stats.get('image_generation_today', 0))}*\n\n"

        stats_text += f"üë• *–†–µ—Ñ–µ—Ä–∞–ª—ã:*\n"
        stats_text += f"üîó –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: *{safe_format(stats.get('total_referrals', 0))}*\n"
        stats_text += f"üéÅ –í—ã–¥–∞–Ω–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤: *{safe_format(stats.get('referral_bonuses_given', 0))}*\n\n"

        stats_text += f"üí∞ *–ü–æ–¥–ø–∏—Å–∫–∏:*\n"
        stats_text += f"‚≠ê –ü–ª–∞—Ç–µ–∂–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{safe_format(stats.get('payments_today', 0))}*\n"
        stats_text += f"üíµ –î–æ—Ö–æ–¥ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: *{safe_format(stats.get('revenue_today', 0))}‚≠ê*"

        try:
            await message.answer(stats_text, parse_mode="Markdown")
        except Exception as markdown_error:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ: {markdown_error}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            plain_text = stats_text.replace('*', '').replace('_', '')
            await message.answer(plain_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@dp.message(Command("admin_cancel"))
async def admin_cancel_cmd(message: types.Message):
    """–û—Ç–º–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ä–µ–¥—Å—Ç–≤"""
    if message.from_user.id not in BotConfig.ADMIN_IDS:
        return

    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/admin_cancel <transaction_id>\n"
            "/admin_cancel <transaction_id> <user_id>\n\n"
            "–ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ—Ç –≤ –ë–î, —É–∫–∞–∂–∏—Ç–µ user_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
        )
        return

    transaction_id = args[1]
    manual_user_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ user_id –≤—Ä—É—á–Ω—É—é
    if len(args) == 3:
        try:
            manual_user_id = int(args[2])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
            return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –ë–î
        transaction_info = await db_manager.get_transaction_info(transaction_id)

        if transaction_info:
            # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î
            user_id = transaction_info['user_id']
            amount = transaction_info['amount']
            status = transaction_info['status']
            subscription_type = transaction_info.get('subscription_type', 'unknown')
            display_name = f"@{transaction_info['username']}" if transaction_info['username'] else f"ID: {user_id}"

            if status == 'cancelled':
                await message.answer(f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞\nID: {transaction_id[:30]}...")
                return

            if status == 'refunded':
                await message.answer(f"‚ö†Ô∏è –ü–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω –≤–æ–∑–≤—Ä–∞—Ç\nID: {transaction_id[:30]}...")
                return

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –ë–î
            short_transaction_id = transaction_id[:30] + "..." if len(transaction_id) > 30 else transaction_id

            await message.answer(
                f"‚ö†Ô∏è –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –û–¢–ú–ï–ù–´ (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –ë–î)\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
                f"üí∞ –°—É–º–º–∞: {amount} –∑–≤–µ–∑–¥\n"
                f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {short_transaction_id}\n"
                f"üìã –¢–∏–ø: {subscription_type}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                f"‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                f"‚Ä¢ –í–µ—Ä–Ω–µ—Ç {amount} Telegram Stars\n"
                f"‚Ä¢ –û–±–Ω–æ–≤–∏—Ç —Å—Ç–∞—Ç—É—Å –≤ –ë–î\n"
                f"‚Ä¢ –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n"
                f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_db_{transaction_id}")],
                    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –Ω–µ –æ—Ç–º–µ–Ω—è—Ç—å", callback_data="cancel_cancel")]
                ])
            )

        else:
            # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î
            if not manual_user_id:
                short_transaction_id = transaction_id[:30] + "..." if len(transaction_id) > 30 else transaction_id

                await message.answer(
                    f"‚ùå –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –ù–ï –ù–ê–ô–î–ï–ù–ê –í –ë–î\n\n"
                    f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {short_transaction_id}\n\n"
                    f"üí° –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                    f"/admin_cancel {transaction_id} 1374423290\n\n"
                    f"–ì–¥–µ:\n"
                    f"‚Ä¢ –ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø–æ–ª–Ω—ã–π ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
                    f"‚Ä¢ –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
                    f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è\n"
                    f"–≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º—ã –∏ —Å—Ç–∞—Ç—É—Å–∞!"
                )
                return

            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º user_id
            try:
                # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_status = await db_manager.get_user_status(manual_user_id)
                if user_status:
                    display_name = f"@{user_status['username']}" if user_status['username'] else f"ID: {manual_user_id}"
                    subscription_info = f"–¢–∏–ø: {user_status['subscription_type']}"
                else:
                    display_name = f"ID: {manual_user_id}"
                    subscription_info = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"

            except Exception:
                display_name = f"ID: {manual_user_id}"
                subscription_info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞
            short_transaction_id = transaction_id[:30] + "..." if len(transaction_id) > 30 else transaction_id

            await message.answer(
                f"‚ö†Ô∏è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–û–ó–í–†–ê–¢\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
                f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {short_transaction_id}\n"
                f"üìä {subscription_info}\n\n"
                f"üö® –í–ù–ò–ú–ê–ù–ò–ï:\n"
                f"‚Ä¢ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞—à–µ–π –ë–î\n"
                f"‚Ä¢ –°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞\n"
                f"‚Ä¢ Telegram —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Å—É–º–º—É\n"
                f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –º–æ–∂–µ—Ç –Ω–µ —Å–±—Ä–æ—Å–∏—Ç—å—Å—è\n"
                f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ\n\n"
                f"–í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞?",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö® –î–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç",
                                          callback_data=f"confirm_cancel_force_{transaction_id}_{manual_user_id}")],
                    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_cancel")]
                ])
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ admin_cancel: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@dp.message(Command("admin_user"))
async def admin_user_cmd(message: types.Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if message.from_user.id not in BotConfig.ADMIN_IDS:
        return

    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_user <user_id/@username>")
        return

    try:
        identifier = args[1]
        user_id, display_name = await get_user_by_identifier(identifier)

        if not user_id:
            await message.answer(f"‚ùå {display_name}")
            return

        status = await db_manager.get_user_status(user_id)
        referral_stats = await db_manager.get_referral_stats(user_id)
        transactions = await db_manager.get_user_transactions(user_id, 5)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Markdown
        def escape_markdown(text):
            if text is None:
                return "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            special_chars = ['_', '*', '`', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
            escaped = str(text)
            for char in special_chars:
                escaped = escaped.replace(char, f'\\{char}')
            return escaped

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        user_id_safe = escape_markdown(user_id)
        display_name_safe = escape_markdown(display_name)
        first_name_safe = escape_markdown(status.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
        username_safe = escape_markdown(status.get('username', '–ù–µ—Ç'))
        subscription_type_safe = escape_markdown(status['subscription_type'])
        referral_code_safe = escape_markdown(referral_stats['referral_code'])
        invited_count_safe = escape_markdown(referral_stats['invited_count'])

        info_text = f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name_safe}*\n\n"
        info_text += f"üÜî ID: `{user_id_safe}`\n"
        info_text += f"üë§ –ò–º—è: {first_name_safe}\n"
        info_text += f"üìß Username: @{username_safe}\n"
        info_text += f"üíé –¢–∞—Ä–∏—Ñ: {subscription_type_safe}\n"

        if status['subscription_expires']:
            try:
                expires = datetime.fromisoformat(status['subscription_expires'])
                expires_safe = escape_markdown(expires.strftime('%d.%m.%Y %H:%M'))
                info_text += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: {expires_safe}\n"
            except:
                info_text += f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã\n"

        if status['referral_bonus_expires']:
            try:
                bonus_expires = datetime.fromisoformat(status['referral_bonus_expires'])
                bonus_expires_safe = escape_markdown(bonus_expires.strftime('%d.%m.%Y %H:%M'))
                info_text += f"üéÅ –†–µ—Ñ\\. –±–æ–Ω—É—Å –¥–æ: {bonus_expires_safe}\n"
            except:
                info_text += f"üéÅ –†–µ—Ñ\\. –±–æ–Ω—É—Å –¥–æ: –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
        info_text += f"\nüí≥ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:*\n"
        if transactions:
            for idx, transaction in enumerate(transactions, 1):
                try:
                    created_date = datetime.fromisoformat(transaction['created_at']).strftime('%d.%m.%Y')
                    transaction_id = transaction.get('telegram_payment_charge_id', transaction.get('payment_id', 'N/A'))
                    amount = transaction.get('amount', 0)
                    status_emoji = "‚úÖ" if transaction['status'] == 'completed' else "‚ùå" if transaction[
                                                                                               'status'] == 'cancelled' else "‚è≥"

                    info_text += f"{idx}\\. {status_emoji} `{escape_markdown(transaction_id)[:20]}{'...' if len(str(transaction_id)) > 20 else ''}`\n"
                    info_text += f"   üìÖ {escape_markdown(created_date)} \\| üí∞ {escape_markdown(amount)}‚≠ê \\| {escape_markdown(transaction['subscription_type'])}\n"
                except Exception as e:
                    info_text += f"{idx}\\. ‚ùì –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏\n"
        else:
            info_text += "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"

        info_text += f"\nüë• *–†–µ—Ñ–µ—Ä–∞–ª—ã:*\n"
        info_text += f"üîó –ö–æ–¥: `{referral_code_safe}`\n"
        info_text += f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {invited_count_safe}\n"

        info_text += f"\nüìä *–õ–∏–º–∏—Ç—ã:*\n"

        limit_names = {
            "free_text_requests": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
            "premium_text_requests": "–ü—Ä–µ–º–∏—É–º –∑–∞–ø—Ä–æ—Å—ã",
            "photo_analysis": "–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            "flux_generation": "Flux –≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
            "midjourney_generation": "Midjourney –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
        }

        for limit_type, limit_info in status["limits"].items():
            if limit_type in limit_names:
                limit_name = limit_names[limit_type]
                used_safe = escape_markdown(limit_info['used'])
                limit_safe = escape_markdown(limit_info['limit'])
                info_text += f"‚Ä¢ {limit_name}: {used_safe}/{limit_safe}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            await message.answer(info_text, parse_mode="Markdown")
        except Exception as markdown_error:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown: {markdown_error}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            plain_text = info_text.replace('*', '').replace('`', '').replace('\\', '')
            await message.answer(plain_text)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@dp.message(Command("admin_premium"))
async def admin_premium_cmd(message: types.Message):
    """–í—ã–¥–∞—á–∞ –ø—Ä–µ–º–∏—É–º–∞"""
    if message.from_user.id not in BotConfig.ADMIN_IDS:
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_premium <user_id/@username> <days>")
        return

    try:
        identifier = args[1]
        days = int(args[2])

        user_id, display_name = await get_user_by_identifier(identifier)

        if not user_id:
            await message.answer(f"‚ùå {display_name}")
            return

        await db_manager.set_subscription(user_id, "premium", days)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {display_name} –≤—ã–¥–∞–Ω –ø—Ä–µ–º–∏—É–º –Ω–∞ {days} –¥–Ω–µ–π")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                user_id,
                f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                f"–í–∞–º –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ Premium –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π!\n"
                f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–º–∏—É–º —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞! ‚ù§Ô∏è",
                parse_mode="Markdown"
            )
        except Exception:
            pass

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message(Command("admin_reset"))
async def admin_reset_cmd(message: types.Message):
    """–°–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
    """–°–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
    if message.from_user.id not in BotConfig.ADMIN_IDS:
        return

    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_reset <user_id/@username>")
        return

    try:
        identifier = args[1]
        user_id, display_name = await get_user_by_identifier(identifier)

        if not user_id:
            await message.answer(f"‚ùå {display_name}")
            return

        await db_manager.reset_subscription(user_id)
        await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {display_name} —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                user_id,
                f"‚ÑπÔ∏è **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ**\n\n"
                f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Premium –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ü–æ–¥–ø–∏—Å–∫–∞'.",
                parse_mode="Markdown"
            )
        except Exception:
            pass

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.callback_query(F.data.startswith("confirm_cancel_db_"))
async def handle_confirm_cancel_db(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ –ë–î"""
    if callback_query.from_user.id not in BotConfig.ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    transaction_id = callback_query.data.split("confirm_cancel_db_", 1)[1]

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transaction_info = await db_manager.get_transaction_info(transaction_id)

        if not transaction_info:
            await callback_query.message.edit_text("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
            return

        user_id = transaction_info['user_id']
        amount = transaction_info['amount']
        display_name = f"@{transaction_info['username']}" if transaction_info['username'] else f"ID: {user_id}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        short_transaction_id = transaction_id[:30] + "..." if len(transaction_id) > 30 else transaction_id

        await callback_query.message.edit_text(
            f"üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–ú–ï–ù–´ (–ë–î)...\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
            f"üí∞ –í–æ–∑–≤—Ä–∞—â–∞–µ–º: {amount} –∑–≤–µ–∑–¥\n"
            f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {short_transaction_id}"
        )

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
        success = await process_refund(transaction_id, user_id, amount, display_name, callback_query.message, True)

        if success:
            logging.info(
                f"–ê–î–ú–ò–ù –û–¢–ú–ï–ù–ê (–ë–î): —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id}, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {amount} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –∏–∑ –ë–î: {e}")
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await callback_query.answer()


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –í–û–ó–í–†–ê–¢–ê
@dp.callback_query(F.data.startswith("confirm_cancel_force_"))
async def handle_confirm_cancel_force(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    if callback_query.from_user.id not in BotConfig.ADMIN_IDS:
        await callback_query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ: confirm_cancel_force_{transaction_id}_{user_id}
        data_parts = callback_query.data.split("confirm_cancel_force_", 1)[1]
        last_underscore = data_parts.rfind('_')

        if last_underscore == -1:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö")
            return

        transaction_id = data_parts[:last_underscore]
        user_id = int(data_parts[last_underscore + 1:])

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
        try:
            user_status = await db_manager.get_user_status(user_id)
            display_name = f"@{user_status['username']}" if user_status and user_status[
                'username'] else f"ID: {user_id}"
        except:
            display_name = f"ID: {user_id}"

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        short_transaction_id = transaction_id[:20] + "..." if len(transaction_id) > 20 else transaction_id

        try:
            await callback_query.message.edit_text(
                f"üö® **–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–û–ó–í–†–ê–¢\\.\\.\\.**\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
                f"üí∞ –°—É–º–º–∞: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è Telegram\n"
                f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: `{short_transaction_id}`\n\n"
                f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram API\\.\\.\\.",
                parse_mode="MarkdownV2"
            )
        except Exception as markdown_error:
            logging.warning(f"–û—à–∏–±–∫–∞ MarkdownV2 –≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –≤–æ–∑–≤—Ä–∞—Ç–µ: {markdown_error}")
            await callback_query.message.edit_text(
                f"üö® –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–û–ó–í–†–ê–¢...\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
                f"üí∞ –°—É–º–º–∞: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è Telegram\n"
                f"üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {short_transaction_id}\n\n"
                f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ Telegram API..."
            )

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–µ—Ä–Ω—É—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –±–µ–∑ –∑–Ω–∞–Ω–∏—è —Å—É–º–º—ã
        success = await process_refund(transaction_id, user_id, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", display_name, callback_query.message,
                                       False)

        if success:
            logging.info(f"–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –í–û–ó–í–†–ê–¢: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    await callback_query.answer()


@dp.callback_query(F.data == "cancel_cancel")
async def handle_cancel_cancel(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Ç–º–µ–Ω—ã"""
    await callback_query.message.edit_text("‚ùå –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–µ—Ä–≤–∞–Ω–∞")
    await callback_query.answer()


@dp.message(Command("admin_broadcast"))
async def admin_broadcast_cmd(message: types.Message):
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if message.from_user.id not in BotConfig.ADMIN_IDS:
        return

    args = message.text.split(maxsplit=1)
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>")
        return

    broadcast_text = args[1]

    try:
        users = await db_manager.get_all_users()
        total_users = len(users)
        sent_count = 0
        failed_count = 0

        status_msg = await message.answer(f"üì§ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

        for user_id in users:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ parse_mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await bot.send_message(user_id, broadcast_text)
                sent_count += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if sent_count % 10 == 0:
                    try:
                        await bot.edit_message_text(
                            f"üì§ –†–∞—Å—Å—ã–ª–∫–∞: {sent_count}/{total_users} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ...",
                            chat_id=status_msg.chat.id,
                            message_id=status_msg.message_id
                        )
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
                await asyncio.sleep(0.05)

            except Exception as e:
                failed_count += 1
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        try:
            await bot.edit_message_text(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}",
                chat_id=status_msg.chat.id,
                message_id=status_msg.message_id
            )
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å: {failed_count}\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
            )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

# === –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
@dp.message()
async def handle_all_other(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.\n"
        "üí¨ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
        "‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –Ω–∏–∂–µ",
        reply_markup=create_main_menu()
    )


async def on_startup():
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await db_manager.init_database()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await on_startup()

    # –î–æ–±–∞–≤–ª—è–µ–º middleware
    dp.update.middleware(SubscriptionCheckMiddleware())
    dp.update.middleware(UserUpdateMiddleware())

    await bot.delete_webhook(drop_pending_updates=True)
    logging.info("–ù–∞—á–∏–Ω–∞–µ–º polling...")
    logging.info("=" * 50)
    logging.info("–ë–û–¢ –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï")
    logging.info("=" * 50)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())